var Sprite = PIXI.Sprite;
import * as PIXI from "pixi.js";
import { AppLogger } from "../logger/AppLogger";
import { AppLoggerMessageType } from "../logger/AppLoggerMessageType";
export class TextureHolder {
    static getLayoutTextureByName(value) {
        for (let i = 0; i < this._layoutConfig.length; i++) {
            let configName = this._layoutConfig[i];
            let texture = PIXI.loader.resources[configName];
            if (!texture || !texture.textures || !texture.textures[value]) {
                continue;
            }
            let result = new Sprite(texture.textures[value]);
            if (result) {
                return result;
            }
        }
        return null;
    }
    static getTextureByName(value) {
        for (let i = 0; i < this._layoutConfig.length; i++) {
            let configName = this._layoutConfig[i];
            let texture = PIXI.loader.resources[configName];
            let result = texture.textures[value];
            if (!texture.textures[value]) {
                continue;
            }
            if (result) {
                return result;
            }
        }
        return null;
    }
    static getTextureMap(json, texturesCache) {
        const resources = {};
        const imagesNames = this.getImageNames(json);
        for (const name of imagesNames) {
            const t = this.findTexture(name, texturesCache);
            if (t) {
                resources[name] = t;
            }
        }
        return resources;
    }
    static findTexture(imageName, texturesCache) {
        const exts = ["", ".png", ".jpg", ".jpeg"];
        let texture;
        for (const ext of exts) {
            texture = texturesCache[imageName + ext];
            if (!texture) {
                texture = texturesCache[imageName + ext.toLocaleUpperCase()];
            }
            if (texture) {
                return texture;
            }
        }
        AppLogger.log(`texture "${imageName}" not found for spine`, AppLoggerMessageType.ERROR);
        return null;
    }
    static getImageNames(json) {
        const images = [];
        if (json.hasOwnProperty("skins")) {
            const skins = json["skins"];
            for (const skinName of Object.keys(skins)) {
                const skin = skins[skinName];
                for (const slotName of Object.keys(skin)) {
                    const slot = skin[slotName];
                    for (const attachmentName of Object.keys(slot)) {
                        const attachment = slot[attachmentName];
                        const type = attachment["type"] || "region";
                        if (type === "region" || type === "mesh") {
                            let imageName = attachment["type"]
                                || attachment["name"]
                                || attachmentName;
                            if (type === "mesh") {
                                imageName = attachmentName;
                            }
                            images.push(imageName);
                        }
                    }
                }
            }
        }
        return images;
    }
    static setLayoutConfig(value) {
        this._layoutConfig.push(value);
    }
}
TextureHolder._layoutConfig = [];
//# sourceMappingURL=TextureHolder.js.map