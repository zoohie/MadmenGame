var Container = PIXI.Container;
import { BaseRectangle } from "../BaseRectangle";
import { createNewView } from "../../../engine/createInstance";
import { BaseSprite } from "../BaseSprite";
import { LocalUtil } from "general-framework";
export class RadioButton extends PIXI.Container {
    constructor(text, data) {
        super();
        this.text = text;
        this.defaultOffset = 12;
        this.create(text, data);
    }
    create(text, data) {
        const offset = data.textOffset !== undefined ? data.textOffset : this.defaultOffset;
        this.normalState = new Container();
        let _normal = createNewView(data.rectNormalTemplate);
        let height;
        if (_normal instanceof BaseRectangle) {
            this._rectWidth = _normal.rect.width;
            height = _normal.rect.height;
        }
        else if (_normal instanceof BaseSprite) {
            _normal.init();
            this._rectWidth = _normal.width;
            height = _normal.height;
        }
        let textField = createNewView(data.labelNormalTemplate);
        this.textField = textField;
        textField.width = this._rectWidth - offset;
        textField.x = offset / 2;
        textField.setText(text);
        this.normalState.addChild(_normal);
        this.normalState.addChild(textField);
        textField.y = height / 2 - textField.height / 2;
        this.addChild(this.normalState);
        this.checkedState = new Container();
        let _checked = createNewView(data.rectCheckedTemplate);
        if (_checked instanceof BaseRectangle) {
        }
        else if (_checked instanceof BaseSprite) {
            _checked.init();
        }
        textField = createNewView(data.labelCheckedTemplate);
        this.textFieldActive = textField;
        textField.width = this._rectWidth - offset;
        textField.x = offset / 2;
        textField.setText(text);
        if (text === LocalUtil.text('Custom'))
            this.textFieldActive.isCustom = true;
        this.checkedState.addChild(_checked);
        this.checkedState.addChild(textField);
        textField.y = height / 2 - textField.height / 2;
        if (data.textColour) {
            this.addHoverEffect(data.textColour);
        }
        this.addChild(this.checkedState);
        this.setChecked(false);
        this.buttonMode = true;
    }
    setChecked(value) {
        this.isChecked = value;
        this.normalState.visible = !value;
        this.checkedState.visible = value;
    }
    getWidth() {
        return this._rectWidth;
    }
    setText(text) {
        this.textField.setText(text);
        this.textFieldActive.setText(text);
    }
    get isCustom() {
        return !!this.textFieldActive.isCustom;
    }
    addHoverEffect(data) {
        this.on("mouseover", () => {
            if (this.isChecked) {
                return;
            }
            this.textField.textField.style.fill = data.hover;
        });
        this.on("mouseout", () => {
            if (this.isChecked) {
                return;
            }
            this.textField.textField.style.fill = data.normal;
        });
        this.on("mousedown", () => {
            this.textField.textField.style.fill = data.checked;
        });
    }
}
//# sourceMappingURL=RadioButton.js.map