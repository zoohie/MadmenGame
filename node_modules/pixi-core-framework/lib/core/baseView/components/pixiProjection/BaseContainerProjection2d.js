import { BaseContainer } from "../BaseContainer";
import { BaseSprite } from "../BaseSprite";
import { BaseCheckBox } from "../BaseCheckBox";
import { BaseButton } from "../BaseButton";
import { BaseSpineComponent } from "../BaseSpineComponent";
import { BaseBitmapLabel } from "../BaseBitmapLabel";
import { BaseSpriteProjection2d } from "./BaseSpriteProjection2d";
import { BaseViewComponentProjection2d } from "./BaseViewComponentProjection2d";
import 'pixi-projection/dist/pixi-projection-spine';
var Container2d = PIXI.projection.Container2d;
export class BaseContainerProjection2d extends BaseViewComponentProjection2d {
    constructor() {
        super(...arguments);
        this.initIsComplete = false;
    }
    init() {
        if (this.initIsComplete) {
            return;
        }
        this.initIsComplete = true;
        this.initSourceView(this);
        if (this.sourceData.align) {
            this.alignedContainer = new Container2d();
            this.children.forEach((child) => {
                this.alignedContainer.addChild(child);
            });
            this.alignedContainer.addChild(this.getChildAt(0));
            this.addChild(this.alignedContainer);
            this.align();
        }
        if (this.sourceData.showBound) {
            this.drawBound();
        }
    }
    align() {
        const localRect = this.alignedContainer.getLocalBounds();
        const offsetX = localRect.x;
        switch (this.sourceData.align) {
            case "left":
                this.alignedContainer.x = 0 - offsetX;
                break;
            case "center":
                this.alignedContainer.x = this.sourceData.width / 2 - this.alignedContainer.width / 2 - offsetX;
                break;
            case "right":
                this.alignedContainer.x = this.sourceData.width - this.alignedContainer.width - offsetX;
                break;
        }
    }
    initSourceView(source) {
        source.init();
        if (source instanceof BaseContainerProjection2d || source instanceof BaseContainer) {
            source.children.forEach((child) => {
                if (child instanceof BaseContainer ||
                    child instanceof BaseSprite ||
                    child instanceof BaseCheckBox ||
                    child instanceof BaseButton ||
                    child instanceof BaseSpineComponent ||
                    child instanceof BaseBitmapLabel ||
                    child instanceof BaseContainerProjection2d ||
                    child instanceof BaseSpriteProjection2d)
                    this.initSourceView(child);
            });
        }
    }
    drawBound() {
        const localRect = this.alignedContainer.getLocalBounds();
        let graphics = new PIXI.Graphics();
        graphics.beginFill(0xFFFF00, 0);
        graphics.lineStyle(1, 0xFF0000);
        const width = this.sourceData.width || this.width;
        graphics.drawRect(0, localRect.y, width, this.height);
        graphics.endFill();
        this.addChild(graphics);
    }
    get sourceData() {
        return this._sourceData;
    }
}
BaseContainerProjection2d.TYPE = "containerProjection2d";
//# sourceMappingURL=BaseContainerProjection2d.js.map