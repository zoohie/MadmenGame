import * as PIXI from "pixi.js";
import { TextureHolder } from "../../utils/layouts/TextureHolder";
import { CoreRenderer } from "../../engine/renderer/CoreRenderer";
import { PointerEventsConstants } from "../PointerEventsConstants";
import { BaseViewComponent } from "./BaseViewComponent";
import { DeviceInfoService } from "general-framework";
import { BaseLabel } from "./BaseLabel";
/**
 * Framework logic part
 */
export class BaseButton extends BaseViewComponent {
    constructor(data) {
        super(data);
        this.initIsComplete = false;
        this.hitAreaOpacity = 0;
        this.hitAreaPolygon = [];
        this.AVERAGE_OFFSET = 50;
        if (data.hitAreaPolygon !== undefined) {
            this.hitAreaPolygon = data.hitAreaPolygon;
        }
        if (data.angle !== undefined) {
            this.rotation = data.angle * (Math.PI / 180);
        }
        if (data.hitAreaOpacity !== undefined) {
            this.hitAreaOpacity = data.hitAreaOpacity;
        }
        if (data.buttonText !== undefined) {
            this.buttonText = data.buttonText;
        }
    }
    get isEnabled() {
        return this._isEnabled;
    }
    set isEnabled(value) {
        this._isEnabled = value;
    }
    get buttonText() {
        return this._buttonText;
    }
    set buttonText(value) {
        this._buttonText = value;
    }
    get sourceData() {
        return this._sourceData;
    }
    get hitTestObject() {
        return this._hitTestObject;
    }
    init() {
        if (this.initIsComplete) {
            return;
        }
        this.normal = TextureHolder.getLayoutTextureByName(this.sourceData.images.normal);
        this.over = TextureHolder.getLayoutTextureByName(this.sourceData.images.over);
        this.disable = TextureHolder.getLayoutTextureByName(this.sourceData.images.disable);
        this.pressed = TextureHolder.getLayoutTextureByName(this.sourceData.images.pressed);
        this.normal.visible = true;
        this.over.visible = false;
        this.disable.visible = false;
        this.pressed.visible = false;
        this.addChild(this.normal);
        this.addChild(this.over);
        this.addChild(this.disable);
        this.addChild(this.pressed);
        if (this.hitAreaPolygon.length > 0) {
            this._hitTestObject = this.drawPoly();
        }
        else {
            this._hitTestObject = this.drawRectangle();
        }
        this.addChild(this._hitTestObject);
        this._hitTestObject.interactive = true;
        this._hitTestObject.buttonMode = true;
        this._hitTestObject.on(PointerEventsConstants.POINTERDOWN, this.onButtonDown.bind(this));
        this._hitTestObject.on(PointerEventsConstants.CLICK, this.onButtonUp.bind(this));
        this._hitTestObject.on(PointerEventsConstants.POINTEROVER, this.onButtonOver.bind(this));
        this._hitTestObject.on(PointerEventsConstants.POINTEROUT, this.onButtonOut.bind(this));
        if (DeviceInfoService.isMobile) {
            this._hitTestObject.on(PointerEventsConstants.POINTERUP, this.onButtonUp.bind(this));
            this._hitTestObject.on("touchendoutside", this.onButtonOut.bind(this));
        }
        if (this._buttonText) {
            this.createButtonTextLabels();
        }
        this.initIsComplete = true;
    }
    drawPoly() {
        let graphics = new PIXI.Graphics();
        graphics.beginFill(0xffffff, this.hitAreaOpacity);
        graphics.drawPolygon(this.hitAreaPolygon);
        graphics.endFill();
        return graphics;
    }
    drawRectangle() {
        let graphics = new PIXI.Graphics();
        graphics.beginFill(0xffffff, this.hitAreaOpacity);
        graphics.drawRect(0, 0, this.normal.width, this.normal.height);
        graphics.endFill();
        return graphics;
    }
    onAdded() {
        this.normal.visible = true;
        if (this._buttonText && !this.commonLabel) {
            this.normalLabel.visible = true;
        }
    }
    onButtonDown() {
        this.pressed.visible = true;
        this.normal.visible = this.over.visible = this.disable.visible = false;
        this.emit(PointerEventsConstants.POINTERDOWN);
        if (this._buttonText && !this.commonLabel) {
            this.pressedLabel.visible = true;
            this.overLabel.visible = this.normalLabel.visible = this.disableLabel.visible = false;
        }
    }
    onButtonUp() {
        const mobileAllow = this.pressed.visible;
        this.checkOver();
        if (DeviceInfoService.isMobile) {
            if (mobileAllow) {
                this.emit(PointerEventsConstants.CLICKED);
            }
        }
        else {
            this.emit(PointerEventsConstants.CLICKED);
        }
    }
    onButtonOver() {
        this.over.visible = true;
        this.normal.visible = this.disable.visible = this.pressed.visible = false;
        if (!DeviceInfoService.isMobile) {
            this.emit(PointerEventsConstants.MOUSE_OVER);
        }
        if (this._buttonText && !this.commonLabel) {
            this.overLabel.visible = true;
            this.disableLabel.visible = this.normalLabel.visible = this.pressedLabel.visible = false;
        }
    }
    onButtonOut() {
        this.normal.visible = true;
        this.over.visible = this.disable.visible = this.pressed.visible = false;
        if (!DeviceInfoService.isMobile) {
            this.emit(PointerEventsConstants.MOUSE_OUT);
        }
        if (this._buttonText && !this.commonLabel) {
            this.normalLabel.visible = true;
            this.overLabel.visible = this.disableLabel.visible = this.pressedLabel.visible = false;
        }
    }
    createButtonTextLabels() {
        if (!this._buttonText.over && !this._buttonText.pressed &&
            !this._buttonText.normal && !this._buttonText.disable) {
            this.commonLabel = this.newBaseLabel(this._buttonText.common, this.normal.parent);
            this.commonLabel.visible = true;
            return;
        }
        this.overLabel = this.newBaseLabel(this._buttonText.over, this.over.parent);
        this.pressedLabel = this.newBaseLabel(this._buttonText.pressed, this.pressed.parent);
        this.disableLabel = this.newBaseLabel(this._buttonText.disable, this.disable.parent);
        this.normalLabel = this.newBaseLabel(this._buttonText.normal, this.normal.parent);
        this.normalLabel.visible = true;
    }
    newBaseLabel(labelConfig, buttonParent) {
        let baseLabel = new BaseLabel(this.addCommonParameters(labelConfig, this._buttonText.common));
        baseLabel.visible = false;
        if (labelConfig.alignToWidth) {
            this.alignTextFieldToWidth(buttonParent, baseLabel);
        }
        if (labelConfig.alignToHeight) {
            this.alignTextFieldToHeight(buttonParent, baseLabel);
        }
        this.addChild(baseLabel);
        return baseLabel;
    }
    addCommonParameters(target, common) {
        for (let key of Object.keys(common)) {
            if (!target[key]) {
                target[key] = common[key];
            }
        }
        return target;
    }
    alignTextFieldToWidth(button, label) {
        label.x = (button.width - label.width) / 2;
        label.alignText();
    }
    alignTextFieldToHeight(button, label) {
        label.y = (button.height - label.height) / 2;
        label.alignText();
    }
    enable(value) {
        this._hitTestObject.interactive = value;
        this._hitTestObject.buttonMode = value;
        this.isEnabled = value;
        if (!value) {
            this.disable.visible = true;
            this.over.visible = this.normal.visible = this.pressed.visible = false;
            if (this._buttonText && !this.commonLabel) {
                this.disableLabel.visible = true;
                this.overLabel.visible = this.normalLabel.visible = this.pressedLabel.visible = false;
            }
        }
        else {
            this.checkOver();
        }
    }
    setVisible(value) {
        this.visible = value;
        if (this.isEnabled) {
            this.checkOver();
        }
    }
    checkOver() {
        let mousePosition = CoreRenderer.renderer.plugins.interaction.mouse.global;
        const hitObject = CoreRenderer.renderer.plugins.interaction.hitTest(mousePosition);
        if (hitObject === this.hitTestObject) {
            this.over.visible = true;
            this.normal.visible = this.disable.visible = this.pressed.visible = false;
            if (this._buttonText && !this.commonLabel) {
                this.overLabel.visible = true;
                this.disableLabel.visible = this.normalLabel.visible = this.pressedLabel.visible = false;
            }
        }
        else {
            this.normal.visible = true;
            this.over.visible = this.disable.visible = this.pressed.visible = false;
            if (this._buttonText && !this.commonLabel) {
                this.normalLabel.visible = true;
                this.overLabel.visible = this.disableLabel.visible = this.pressedLabel.visible = false;
            }
        }
    }
    reposition(x, y) {
        this.position.set(x, y);
    }
}
//# sourceMappingURL=BaseButton.js.map