import { TextureHolder } from "../../utils/layouts/TextureHolder";
import * as PIXI from "pixi.js";
import { PointerEventsConstants } from "../PointerEventsConstants";
import { BaseViewComponent } from "./BaseViewComponent";
import { DeviceInfoService } from "general-framework";
/**
 * Framework logic part
 */
export class BaseCheckBox extends BaseViewComponent {
    constructor(data) {
        super(data);
        this._isChecked = true;
        this.hitAreaPolygon = [];
        if (data.hitAreaPolygon !== undefined) {
            this.hitAreaPolygon = data.hitAreaPolygon;
        }
        if (data.angle !== undefined) {
            this.rotation = data.angle * (Math.PI / 180);
        }
    }
    init() {
        if (this.onState) {
            return;
        }
        this.onState = TextureHolder.getLayoutTextureByName(this.sourceData.images.on);
        this.offState = TextureHolder.getLayoutTextureByName(this.sourceData.images.off);
        this.onState.visible = true;
        this.offState.visible = false;
        this.addChild(this.onState);
        this.addChild(this.offState);
        if (this.hitAreaPolygon.length > 0) {
            this._hiTestObject = this.drawPoly();
        }
        else {
            this._hiTestObject = this.drawRectangle();
        }
        this.addChild(this._hiTestObject);
        this._hiTestObject.interactive = true;
        this._hiTestObject.buttonMode = true;
        this.state = BaseCheckBox.UP_STATE;
        this._hiTestObject.on(PointerEventsConstants.POINTERDOWN, this.onButtonDown.bind(this));
        this._hiTestObject.on(PointerEventsConstants.CLICK, this.onButtonUp.bind(this));
        this._hiTestObject.on(PointerEventsConstants.POINTEROVER, this.onButtonOver.bind(this));
        this._hiTestObject.on(PointerEventsConstants.POINTEROUT, this.onButtonOut.bind(this));
        if (DeviceInfoService.isMobile) {
            this._hiTestObject.on(PointerEventsConstants.POINTERUP, this.onButtonUp.bind(this));
        }
    }
    onAdded() {
        this.onState.visible = true;
    }
    onButtonDown() {
        this.state = BaseCheckBox.PRESSED_STATE;
    }
    onButtonUp() {
        if (this.state === BaseCheckBox.PRESSED_STATE) {
            if (this._isChecked) {
                this._isChecked = false;
            }
            else {
                this._isChecked = true;
            }
            this.updateButton();
            this.emit(PointerEventsConstants.CLICKED, this.isChecked);
            this.state = BaseCheckBox.UP_STATE;
        }
    }
    onButtonOver() {
    }
    onButtonOut() {
    }
    enable(value) {
        this._hiTestObject.interactive = value;
        this._hiTestObject.buttonMode = value;
        this.isEnabled = value;
    }
    setVisible(value) {
        this.visible = value;
    }
    get isEnabled() {
        return this._isEnabled;
    }
    set isEnabled(value) {
        this._isEnabled = value;
    }
    get isChecked() {
        return this._isChecked;
    }
    set isChecked(value) {
        this._isChecked = value;
        this.updateButton();
    }
    get sourceData() {
        return this._sourceData;
    }
    updateButton() {
        this.onState.visible = this._isChecked;
        this.offState.visible = !this._isChecked;
    }
    drawPoly() {
        let graphics = new PIXI.Graphics();
        graphics.beginFill(0xffffff, 0);
        graphics.drawPolygon(this.hitAreaPolygon);
        graphics.endFill();
        return graphics;
    }
    drawRectangle() {
        let graphics = new PIXI.Graphics();
        graphics.beginFill(0xffffff, 0);
        graphics.drawRect(0, 0, this.onState.width, this.onState.height);
        graphics.endFill();
        return graphics;
    }
}
BaseCheckBox.PRESSED_STATE = "BaseCheckBox.PRESSED_STATE";
BaseCheckBox.HOVER_STATE = "BaseCheckBox.HOVER_STATE";
BaseCheckBox.UP_STATE = "BaseCheckBox.UP_STATE";
//# sourceMappingURL=BaseCheckBox.js.map