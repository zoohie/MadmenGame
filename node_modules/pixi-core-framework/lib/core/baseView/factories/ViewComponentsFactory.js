import { ViewTypeConst } from "../ViewTypeConst";
import { BaseContainer } from "../components/BaseContainer";
import { createInstance } from "../../engine/createInstance";
import { DeviceInfoService } from "general-framework";
import { SpineFactory } from "./SpineFactory";
export class ViewComponentsFactory {
    constructor() {
        this.viewMap = {};
        if (ViewComponentsFactory._instance) {
            throw new Error("Error: Instantiation failed: Use ViewComponentsFactory.getInstance() instead of new.");
        }
        ViewComponentsFactory._instance = this;
    }
    static getInstance() {
        return this._instance;
    }
    parseViewList(data) {
        for (let i = 0; i < data.layoutList.length; i++) {
            let item = data.layoutList[i];
            if (item.platform && item.platform !== this.getPlatform()) {
                continue;
            }
            this.parseViewComponent(item);
        }
    }
    parseContainer(data, parentContainer) {
        let currentContainer = new BaseContainer(data);
        currentContainer.name = data.layoutID;
        if (parentContainer) {
            parentContainer.addChild(currentContainer);
        }
        for (let i = 0; i < data.childHolder.length; i++) {
            let item = data.childHolder[i];
            if (item.platform && item.platform !== this.getPlatform()) {
                continue;
            }
            this.parseViewComponent(item, currentContainer);
        }
        return currentContainer;
    }
    parseViewComponent(item, parentContainer) {
        switch (item.type) {
            case BaseContainer.TYPE:
                this.mapData(this.parseContainer(item, parentContainer));
                break;
            default:
                this.createViewComponent(item, ViewTypeConst[item.type], parentContainer);
                break;
        }
    }
    createViewComponent(data, classConstructor, parentContainer) {
        let viewComponent = createInstance(classConstructor, [data]);
        viewComponent.name = data.layoutID;
        if (parentContainer) {
            parentContainer.addChild(viewComponent);
        }
        this.mapData(viewComponent);
        if (process.env.NODE_ENV !== 'production' && data.type === "spineAnimation") {
            if (data.useCheats) {
                SpineFactory.getInstance().setUseCheatSpineClipName(viewComponent.name);
            }
        }
    }
    mapData(data) {
        if (data.layoutID) {
            this.viewMap[data.layoutID] = data;
        }
    }
    getViewComponent(layoutID) {
        return this.viewMap[layoutID];
    }
    createNewView(layoutID) {
        const sourceView = this.viewMap[layoutID];
        const data = sourceView.sourceData;
        const className = ViewTypeConst[sourceView.sourceData.type];
        if (sourceView.sourceData.type === BaseContainer.TYPE) {
            return this.parseContainer(data);
        }
        const view = createInstance(className, [data]);
        return view;
    }
    getPlatform() {
        if (DeviceInfoService.isMobile) {
            return "mobile";
        }
        return "desktop";
    }
}
ViewComponentsFactory._instance = new ViewComponentsFactory();
//# sourceMappingURL=ViewComponentsFactory.js.map