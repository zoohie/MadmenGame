import { BaseSpineData } from "../interfaces/BaseSpineData";
import { getViewComponent } from "../../engine/createInstance";
import { BaseSpineComponent } from "../components/BaseSpineComponent";
import { BaseSpineAnimationProjection2d } from "../components/pixiProjection/BaseSpineAnimationProjection2d";
export class SpineFactory {
    constructor() {
        this._spineMap = {};
        this._spineCheatList = [];
        if (SpineFactory._instance) {
            throw new Error("Error: Instantiation failed: Use SpineFactory.getInstance() instead of new.");
        }
        SpineFactory._instance = this;
    }
    static getInstance() {
        return this._instance;
    }
    mapSpine(dataParse, id) {
        let baseSpineData = new BaseSpineData();
        baseSpineData.id = id;
        baseSpineData.skeletonData = dataParse;
        this._spineMap[baseSpineData.id] = baseSpineData;
    }
    getSkeletonData(id) {
        return this._spineMap[id].skeletonData;
    }
    getSpineClip(id) {
        return this.createSpineMovie(id);
    }
    getSpineClipProjection2d(id) {
        return this.createSpineMovieProjection2d(id);
    }
    createSpineMovieProjection2d(id) {
        let baseData = getViewComponent(id);
        let baseSpineClip = new BaseSpineAnimationProjection2d(baseData.sourceData);
        baseSpineClip.createSpineMovie(baseSpineClip.skeletonData);
        return baseSpineClip;
    }
    setUseCheatSpineClipName(name) {
        this._spineCheatList.push(name);
    }
    createSpineMovie(id) {
        let baseData = getViewComponent(id);
        let baseSpineClip = new BaseSpineComponent(baseData.sourceData);
        baseSpineClip.createSpineMovie(baseSpineClip.skeletonData);
        return baseSpineClip;
    }
    get spineCheatList() {
        return this._spineCheatList;
    }
}
SpineFactory._instance = new SpineFactory();
//# sourceMappingURL=SpineFactory.js.map