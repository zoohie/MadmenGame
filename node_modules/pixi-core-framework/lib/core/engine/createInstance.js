import { Kernel } from "./Kernel";
import { Facade } from "./Facade";
import { SlotEventDispatcher } from "./eventDispatcher/SlotEventDispatcher";
import { CoreTimer } from "./renderer/CoreTimer";
import { CoreRenderer } from "./renderer/CoreRenderer";
import { EnterFrameManager } from "./renderer/EnterFrameManager";
import { TweenMax } from "gsap";
import { ViewComponentsFactory } from "../baseView/factories/ViewComponentsFactory";
import { DynamicViewCreator } from "../baseView/factories/DynamicViewCreator";
import { SpineFactory } from "../baseView/factories/SpineFactory";
import { EventDispatcher } from "general-framework";
import { RendererManagerEvents } from "../../modules/renderModule/events/RendererManagerEvents";
export function createInstance(constructor, args) {
    return Kernel.createInstance(constructor, args);
}
export function bindTo(oldConstructor, newConstructor) {
    Kernel.bindTo(oldConstructor, newConstructor);
}
export function bindMediator(mediatorClass, viewClass, layoutID, holderID = "") {
    DynamicViewCreator.bindMediator(mediatorClass, viewClass, layoutID, holderID);
}
export function getModel(classInstance, modelConstructor) {
    return Facade.instance().getModel(classInstance, modelConstructor);
}
export function addModel(model) {
    Facade.instance().addModel(model);
}
export function addServerModel(model) {
    Facade.instance().addServerModel(model);
}
export function getDispatcher(instance) {
    return SlotEventDispatcher.getInstance(instance);
}
export function getViewComponent(layoutID) {
    return ViewComponentsFactory.getInstance().getViewComponent(layoutID);
}
export function createNewView(layoutID) {
    return ViewComponentsFactory.getInstance().createNewView(layoutID);
}
export function getSpineClip(spineID) {
    return SpineFactory.getInstance().getSpineClip(spineID);
}
export function getSpineClipProjection2d(spineID) {
    return SpineFactory.getInstance().getSpineClipProjection2d(spineID);
}
export function freezeApp() {
    EventDispatcher.getInstance().dispatch(RendererManagerEvents.FREEZE_APP);
    CoreTimer.pauseAll();
    CoreRenderer.pause();
    EnterFrameManager.activate(false);
    TweenMax.pauseAll();
}
export function unfreezeApp() {
    EventDispatcher.getInstance().dispatch(RendererManagerEvents.UNFREEZE_APP);
    CoreTimer.resumeAll();
    CoreRenderer.resume();
    EnterFrameManager.activate(true);
    TweenMax.resumeAll();
}
//# sourceMappingURL=createInstance.js.map