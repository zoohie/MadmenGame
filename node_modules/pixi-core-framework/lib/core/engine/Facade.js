import { BaseServerService } from "../../modules/server/services/BaseServerService";
import { BaseState } from "./fsm/BaseState";
import { AppLogger } from "../utils/logger/AppLogger";
import { AppLoggerMessageType } from "../utils/logger/AppLoggerMessageType";
import { BaseController } from "./BaseController";
import { BaseAction } from "./fsm/BaseAction";
export class Facade {
    constructor() {
        this._serverModels = [];
        this._allModels = [];
    }
    static instance() {
        if (!Facade._instance) {
            Facade._instance = new Facade();
        }
        return Facade._instance;
    }
    addServerModel(model) {
        this._serverModels.push(model);
        this.addModel(model);
    }
    addModel(model) {
        this._allModels.push(model);
    }
    getServerModels(classInstance) {
        if (classInstance instanceof BaseServerService) {
            return this._serverModels;
        }
    }
    getModel(classInstance, modelConstructor) {
        if (classInstance instanceof BaseState ||
            classInstance instanceof BaseController ||
            classInstance instanceof BaseAction) {
            const result = this._allModels.find((model) => {
                return model instanceof modelConstructor;
            });
            return result;
        }
        else {
            AppLogger.log("only classes, derived from BaseState, or BaseController, can access to IBaseModel", AppLoggerMessageType.ERROR);
        }
    }
}
//# sourceMappingURL=Facade.js.map