import { createInstance } from "./createInstance";
import { ScreenMobileManager } from "../utils/screenMobileManager/ScreenMobileManager";
export class CommonModuleInitializer {
    constructor(fsmInitializer) {
        this.fsmInitializer = fsmInitializer;
        this._modules = [];
    }
    /**
     * Add application logic modules. All new application entities should be
     * created only in module execute() method.
     * Should be overridden in  a game ApplicationModuleInitializer
     */
    addModules() {
    }
    addModule(module) {
        this._modules.push(module);
    }
    /**
     * You can bind your application classes to a core classes.
     * So finally your application class will be used instead of core class.
     * Must not be overridden in  a game ApplicationModuleInitializer
     */
    bindClasses() {
        this._modules.forEach((module) => {
            module.bindClasses();
        });
    }
    /**
     * It's a system method.
     * invoke all registered modules (with addModule()).
     * Must not be overridden in  a game ApplicationModuleInitializer
     *
     */
    invokeModules() {
        this._modules.forEach((module) => {
            module.execute();
        });
    }
    /**
     * abstract method. Must not be overridden in  a game ApplicationModuleInitializer
     *
     */
    createFSM() {
        this.fsmInitializer.createFSM();
        this.fsmInitializer.addStates();
        this.fsmInitializer.startFSM();
    }
    /**
     * abstract method. Must not be overridden in  a game ApplicationModuleInitializer
     */
    manageMobile() {
        createInstance(ScreenMobileManager);
    }
}
//# sourceMappingURL=CommonModuleInitializer.js.map