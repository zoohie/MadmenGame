import { DebugUtils } from "./DebugUtils";
export class Kernel {
    /**
     * Create new entities here.
     * @param constructor - constructor of new Class
     * @param args - constructor params
     * use createInstance(MyClass); instead of newMyClass();
     */
    static createInstance(constructor, args) {
        let instance;
        if (this.bindingMap.has(constructor)) {
            constructor = this.bindingMap.get(constructor);
        }
        if (!constructor) {
            throw new Error(`Constructor is ${constructor}`);
        }
        if (args) {
            instance = new constructor(...args);
        }
        else {
            instance = new constructor();
        }
        if (process.env.NODE_ENV !== 'production') {
            // Development tool for create a global link to the class
            const parentName = instance.constructor.__proto__["name"];
            if (parentName === "BaseViewComponent") {
                DebugUtils.mapObjectToGlobalId(instance, instance.layoutID, "v");
            }
            else {
                DebugUtils.mapObjectToGlobalId(instance, instance.constructor["name"], "s");
            }
        }
        return instance;
    }
    /**
     * You can bind your application classes to a core classes.
     * So finally your application class will be used instead of core class.
     * Example:
     * bindTo(CoreClass, ApplicationClass);
     * @param oldConstructor - constructor of core class
     * @param newConstructor - constructor of application class
     */
    static bindTo(oldConstructor, newConstructor) {
        this.bindingMap.set(oldConstructor, newConstructor);
    }
}
Kernel.bindingMap = new Map();
//# sourceMappingURL=Kernel.js.map