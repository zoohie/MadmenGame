import { BaseAction } from "./BaseAction";
/**
 * This action is resolved after the last included action is resolved.
 * The actions start step by step in a queue order.
 */
export class SerialAction extends BaseAction {
    constructor() {
        super(...arguments);
        this.executedQueue = [];
    }
    execute() {
        return new Promise(resolve => {
            this.queue().then(() => {
                this.end();
                resolve();
            });
        });
    }
    queue() {
        return new Promise(resolve => {
            this.executedQueue = this.actions.concat();
            this.executeActionFromQueue();
            this.mainResolve = resolve;
        });
    }
    skip() {
        super.skip();
        this.currentAction.skip();
    }
    executeActionFromQueue() {
        if (this.executedQueue.length === 0 || this.shouldSkip) {
            this.mainResolve();
            return;
        }
        this.currentAction = this.executedQueue.shift();
        this.currentAction.execute().then(() => {
            this.executeActionFromQueue();
        });
    }
}
//# sourceMappingURL=SerialAction.js.map