import { AppLogger } from "../../utils/logger/AppLogger";
import { AppLoggerMessageType } from "../../utils/logger/AppLoggerMessageType";
export class FSMContext {
    constructor() {
        this.states = new Map();
    }
    /**
     * Switching to a next state
     * @param stateId
     */
    goto(stateId) {
        if (!this.states[stateId]) {
            AppLogger.log(`${stateId} is not added to FSM`, AppLoggerMessageType.ERROR);
        }
        if (process.env.NODE_ENV !== 'production') {
            console.groupEnd();
            AppLogger.log(`=> FSM switched to ${stateId}`);
            console.group(`${stateId}`);
        }
        this._currentState = this.states[stateId];
        this._currentState.start().then((state) => {
            this.goto(state);
        });
    }
    /**
     * Add state to FSM
     * @param state
     */
    addState(state) {
        this.states[state.id] = state;
    }
    /**
     * Get current invoked state
     */
    get currentState() {
        return this._currentState;
    }
}
//# sourceMappingURL=FSMContext.js.map