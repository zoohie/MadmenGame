import { AppLogger } from "general-framework";
export class EnterFrameManager {
    constructor() {
        this._listeners = [];
        this._toRemove = [];
        this._active = false;
    }
    static get instance() {
        this.ensure();
        return EnterFrameManager._instance;
    }
    static activate(value) {
        this.instance.active = value;
    }
    /**
     * Add listener to EnterFrame event. If real fps is slower, then 30,
     * then EnterFrame is invoked obligatorily with FPS 30.
     * Using requestAnimationFrame is forbiden
     * @param l
     */
    addListener(l) {
        const removeIndex = this._toRemove.indexOf(l);
        if (removeIndex >= 0) {
            this._toRemove.splice(removeIndex, 1);
        }
        const listenerIndex = this._listeners.indexOf(l);
        if (listenerIndex === -1) {
            this._listeners.push(l);
        }
    }
    removeListener(l) {
        const index = this._toRemove.indexOf(l);
        if (index === -1) {
            this._toRemove.push(l);
        }
    }
    onEnterFrame() {
        if (!this._active) {
            return;
        }
        const currentTime = performance.now();
        const frameTime = (currentTime - this._prevTime) / 1000;
        this._prevTime = currentTime;
        this.animateLoop(frameTime, EnterFrameManager.MIN_FPS, stepTime => this.animateListeners(stepTime));
    }
    animateLoop(frameTime, minFps, callback) {
        const minDelta = 1 / minFps;
        let count = 0;
        let deltaRest = frameTime;
        if (frameTime > minDelta) {
            count = Math.floor(frameTime / minDelta);
            deltaRest = frameTime - count * minDelta;
        }
        for (let c = 0; c < count; c++) {
            callback(minDelta);
        }
        if (deltaRest > 0) {
            callback(deltaRest);
        }
    }
    animateListeners(deltaTime) {
        for (let i = this._toRemove.length - 1; i >= 0; i--) {
            const index = this._listeners.indexOf(this._toRemove[i]);
            if (index >= 0) {
                this._listeners.splice(index, 1);
            }
        }
        this._toRemove.length = 0;
        for (const l of this._listeners) {
            l.onEnterFrame(deltaTime);
        }
    }
    set active(value) {
        if (this._active !== value) {
            this._active = value;
            AppLogger.log("EnterFrameManager set active value: " + String(value));
            if (this._active) {
                this._prevTime = performance.now();
            }
        }
    }
    static ensure() {
        if (!this._instance) {
            this._instance = new EnterFrameManager();
            PIXI.ticker.shared.add(() => {
                this._instance.onEnterFrame();
            });
        }
    }
}
EnterFrameManager.MIN_FPS = 30;
//# sourceMappingURL=EnterFrameManager.js.map