import { AppLogger } from "../../utils/logger/AppLogger";
import { AppLoggerMessageType } from "../../utils/logger/AppLoggerMessageType";
import { BaseState } from "../fsm/BaseState";
import { BaseController } from "../BaseController";
import { BaseAction } from "../fsm/BaseAction";
import { BaseMediator } from "../BaseMediator";
import { BlastworksAPI, EventDispatcher } from "general-framework";
export class SlotEventDispatcher {
    constructor() {
        this._generalDispatcher = EventDispatcher.getInstance();
        if (SlotEventDispatcher._instance) {
            throw new Error("Error: Instantiation failed: Use SlotEventDispatcher.getInstance() instead of new.");
        }
        SlotEventDispatcher._instance = this;
    }
    static getInstance(classInstance) {
        if (classInstance instanceof BaseState ||
            classInstance instanceof BaseController ||
            classInstance instanceof BaseAction ||
            classInstance instanceof BaseMediator) {
            return this._instance;
        }
        else {
            AppLogger.log("only classes, derived from BaseState, BaseController, BaseAction or BaseMediator, can access to SlotEventDispatcher", AppLoggerMessageType.ERROR);
        }
    }
    addListener(event, fn, context) {
        this._generalDispatcher.addListener(event, fn, context);
    }
    removeListener(event, fn, context, once) {
        this._generalDispatcher.removeListener(event, fn, context);
    }
    once(event, fn, context) {
        this._generalDispatcher.once(event, fn, context);
    }
    on(event, fn, context) {
        this._generalDispatcher.on(event, fn, context);
    }
    off(event, fn, context, once) {
        this._generalDispatcher.off(event, fn, context, once);
    }
    removeAllListeners(event) {
        this._generalDispatcher.removeAllListeners(event);
    }
    dispatch(event, options) {
        // this.emit(event, options);
        if (!AppLogger.isProd) {
            this.logEvent(event, options);
        }
        if (BlastworksAPI.isBlastworksPostMessage) {
            BlastworksAPI.postData(event, options);
        }
        this._generalDispatcher.dispatch(event, options);
    }
    logEvent(event, options) {
        AppLogger.log(event, AppLoggerMessageType.EVENT, options);
    }
}
SlotEventDispatcher._instance = new SlotEventDispatcher();
//# sourceMappingURL=SlotEventDispatcher.js.map