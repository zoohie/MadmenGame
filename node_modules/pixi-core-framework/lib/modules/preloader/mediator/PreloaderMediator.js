import { BaseMediator } from "../../../core/engine/BaseMediator";
import { RendererManagerEvents } from "../../renderModule/events/RendererManagerEvents";
import { DeviceInfoService, LoadEvents } from "general-framework";
export class PreloaderMediator extends BaseMediator {
    constructor() {
        super(...arguments);
        this.canShow = false;
    }
    addListeners() {
        super.addListeners();
        this.dispatcher.addListener(LoadEvents.RESET_LOADER_VIEW, this.resetLoaderView, this);
        this.dispatcher.addListener(LoadEvents.LOAD_PROGRESS, this.updateProgress, this);
        this.dispatcher.addListener(LoadEvents.HIDE_LOADER, this.hideView, this);
        this.dispatcher.addListener(RendererManagerEvents.RESIZE, this.onResize, this);
        this.registerViewListener(LoadEvents.LOADING_COMPLETE);
    }
    /**
     * @LoadEvent.LOAD_PROGRESS
     * update progress bar for each loaded asset**/
    hideView() {
        this.canShow = false;
        this.view.removeLoader();
    }
    resetLoaderView() {
        this.canShow = true;
        this.view.resetLoaderView();
        this.checkDeviceMode();
    }
    updateProgress(progress) {
        this.view.updateProgress(progress);
    }
    onResize(params) {
        this.view.onResize(params);
        this.checkDeviceMode();
    }
    checkDeviceMode() {
        if (DeviceInfoService.isLandscape) {
            this.canShow && this.view.show();
        }
        else {
            this.view.hide();
        }
    }
}
//# sourceMappingURL=PreloaderMediator.js.map