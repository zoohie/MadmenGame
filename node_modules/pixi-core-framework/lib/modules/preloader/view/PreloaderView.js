import { BaseView } from "../../../core/engine/BaseView";
import { TweenLite } from "gsap";
import { CoreRenderer } from "../../../core/engine/renderer/CoreRenderer";
import { LoadEvents } from "general-framework";
export class PreloaderView extends BaseView {
    constructor() {
        super(...arguments);
        this.progressCounter = 0;
        this.count = { val: 0 };
        this.isComplete = false;
    }
    initSourceData() {
        this.bar = this.source.getChildByName("loaderProgress");
        this.rect = this.source.getChildByName("progressMask");
        this.progressText = this.source.getChildByName("progressLabel");
        this.progressMask = this.rect.rect;
        this.bar.mask = this.progressMask;
        this.progressMask.width = 1;
        this.source.addChild(this.progressMask);
        let gameLogo = document.getElementById("gameLogo");
        if (gameLogo) {
            this.box = gameLogo.getBoundingClientRect();
        }
        this.setMaskPosition(this.bar.x, this.bar.y);
    }
    removeLoader() {
        if (!this.countTween) {
            return;
        }
        this.countTween.kill();
        this.countTween = null;
        this.isComplete = true;
        this.progressText.setText("100%");
        this.progressMask.width = this.bar.width;
        this.progressTween = TweenLite.to(this.source, 0.4, {
            alpha: 0,
            onComplete: () => {
                this.source.visible = false;
                this.progressText.visible = false;
                this.progressCounter = 0;
                this.emit(LoadEvents.LOADING_COMPLETE);
            }
        });
    }
    updateProgress(totalSize) {
        if (this.progressMask) {
            this.progressCounter += 1;
            if (this.progressCounter > totalSize) {
                return;
            }
            let progress = Math.floor((this.progressCounter / totalSize) * 100);
            this.progressTween = TweenLite.to(this.progressMask, 0.6, {
                width: this.getWidthPosition(progress)
            });
            this.countTween = TweenLite.to(this.count, 0.3, {
                val: progress,
                roundProps: "val",
                onUpdate: () => {
                    if (!this.isComplete) {
                        this.progressText.setText(this.count.val.toString() + "%");
                    }
                }
            });
        }
    }
    resetLoaderView() {
        CoreRenderer.stage.addChild(this.source);
        this.progressCounter = 0;
        // this.source.visible = true;
        this.progressMask.width = 1;
        this.isComplete = false;
    }
    show() {
        super.show();
        this.source.alpha = 1;
    }
    onResize(params) {
        if (!this.source) {
            return;
        }
        if (params.width && params.height) {
            this.source.scale.x = this.source.scale.y = params.scale;
        }
        this.source.position.set(params.positionX, params.positionY);
        this.setMaskPosition(this.bar.x, this.bar.y);
    }
    getWidthPosition(progress) {
        let result;
        result = Math.floor(progress * (this.bar.width) / 100);
        return result;
    }
    setMaskPosition(x, y) {
        this.progressMask.position.set(x, y);
    }
}
//# sourceMappingURL=PreloaderView.js.map