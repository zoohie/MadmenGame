import { BaseController } from "../../core/engine/BaseController";
import { RendererManagerEvents } from "./events/RendererManagerEvents";
import { CoreRenderer } from "../../core/engine/renderer/CoreRenderer";
import { LoadEvents } from "general-framework";
export class RenderManager extends BaseController {
    constructor() {
        super();
        this.dispatcher.addListener(RendererManagerEvents.SET_SAFE_AREA_VIEW, this.calculateViewPosition.bind(this));
        this.dispatcher.addListener(LoadEvents.INITIAL_LOADING_COMPLETE, () => {
            this.dispatcher.dispatch(RendererManagerEvents.GET_SAFE_AREA_VIEW);
        });
        this.dispatcher.addListener(LoadEvents.INIT_LOADER, () => {
            this.addWindowResizeListener();
        });
    }
    addWindowResizeListener() {
        window.addEventListener("resize", () => {
            this.dispatcher.dispatch(RendererManagerEvents.GET_SAFE_AREA_VIEW);
        });
    }
    /**
     * calculate resize parameters
     *
     * @param safeArea - we resize all games into this rectangle
     */
    calculateViewPosition(safeArea) {
        CoreRenderer.onResize();
        let params = new class {
        };
        let newWidth;
        let newHeight;
        let maxWidth = safeArea.sourceData.width;
        let maxHeight = safeArea.sourceData.height;
        // let currentWidth: number = window.innerWidth;
        // let currentHeight: number = window.innerHeight;
        let currentWidth = document.documentElement.clientWidth;
        let currentHeight = document.documentElement.clientHeight;
        const ratio = maxWidth / maxHeight;
        const currRatio = currentWidth / currentHeight;
        let scaleTo;
        let newX = 0;
        let newY = 0;
        if (currRatio < ratio) {
            newWidth = Math.max(maxWidth, currentWidth);
            newHeight = newWidth / ratio;
            scaleTo = currentWidth / maxWidth;
            newY = (currentHeight - maxHeight * scaleTo) / 2;
        }
        else {
            newHeight = Math.max(maxHeight, currentHeight);
            newWidth = newHeight * ratio;
            scaleTo = currentHeight / maxHeight;
            newX = (currentWidth - maxWidth * scaleTo) / 2;
        }
        params.height = newWidth;
        params.width = newHeight;
        params.scale = scaleTo;
        newX = scaleTo * safeArea.sourceData.posX / 2 + newX;
        newY = scaleTo * safeArea.sourceData.posY / 2 + newY;
        params.positionX = newX;
        params.positionY = newY;
        this.dispatcher.dispatch(RendererManagerEvents.RESIZE, params);
    }
}
//# sourceMappingURL=RenderManager.js.map