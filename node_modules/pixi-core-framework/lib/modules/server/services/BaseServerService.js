import { Facade } from "../../../core/engine/Facade";
import { BaseController } from "../../../core/engine/BaseController";
import { createInstance, getModel } from "../../../core/engine/createInstance";
import { ErrorServerModel } from "../../modalPopup/models/ErrorServerModel";
import { ModalPopupEvents } from "../../modalPopup/events/ModalPopupEvents";
import { ModalPopupUtil } from "../../modalPopup/util/ModalPopupUtil";
import { ServerRequest } from "general-framework";
export class BaseServerService extends BaseController {
    /**
     * This is a common method to fetch responses from server.
     * We have 3 possibilities to fetch with timeout 20 sec
     * @param body optional post parameters (Depends on server API)
     * @param params optional getParams to add in request
     */
    fetch(requestBody, responseType, params = {}) {
        if (this.targetService === undefined) {
            this.targetService = createInstance(ServerRequest, [responseType]);
        }
        return this.targetService.fetch(requestBody, params);
    }
    onRequest(data, modelConstructor) {
        if (modelConstructor) {
            let serverModel = getModel(this, modelConstructor);
            serverModel.parseResponse(data);
        }
        else {
            Facade.instance().getServerModels(this).forEach((serverModel) => {
                serverModel.parseResponse(data);
            });
        }
        this.checkServerErrorMessages();
    }
    checkServerErrorMessages(error) {
        const errorServerModel = getModel(this, ErrorServerModel);
        if (error) {
            errorServerModel.parseResponse(error);
        }
        if (errorServerModel.status === "error" || errorServerModel.code) {
            const data = ModalPopupUtil.getModalPopupData(errorServerModel.code, errorServerModel.messageHeader, errorServerModel.messageBody);
            this.dispatcher.dispatch(ModalPopupEvents.SHOW_MODAL_POPUP, data);
        }
    }
}
//# sourceMappingURL=BaseServerService.js.map