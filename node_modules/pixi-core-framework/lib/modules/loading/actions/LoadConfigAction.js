import { BaseAction } from "../../../core/engine/fsm/BaseAction";
import { EventDispatcher, GameInfo, LoadEvents } from "general-framework";
import { ConfigPathData } from "../../../ConfigPathData";
import { ViewComponentsFactory } from "../../../core/baseView/factories/ViewComponentsFactory";
export class LoadConfigAction extends BaseAction {
    constructor() {
        super(...arguments);
        this.generalDispatcher = EventDispatcher.getInstance();
    }
    /**
     * Dispatch event to load configs and listen for event about finish of loading
     */
    execute() {
        return new Promise((resolve) => {
            this.dispatcher.addListener(LoadEvents.VIEW_COMPONENTS_FACTORY_DATA_RECEIVED, (data) => {
                ViewComponentsFactory.getInstance().parseViewList(data);
            });
            this.dispatcher.addListener(LoadEvents.GAME_PARAMS_DATA_RECEIVED, this.onGameParamsLoaded, this);
            this.dispatcher.addListener(LoadEvents.CONFIG_LOADED, () => {
                resolve();
            });
            this.dispatcher.dispatch(LoadEvents.LOAD_CONFIGS, ConfigPathData);
        });
    }
    onGameParamsLoaded(data) {
        GameInfo.init(data.gameName);
    }
}
//# sourceMappingURL=LoadConfigAction.js.map