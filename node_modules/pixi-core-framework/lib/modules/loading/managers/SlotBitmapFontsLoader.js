import { BitmapFontsLoader, LoaderModel, LoadEvents, GameInfo, addFetchTimestamp } from "general-framework";
import * as PIXI from "pixi.js";
export class SlotBitmapFontsLoader extends BitmapFontsLoader {
    loadQueue(assets) {
        return new Promise((resolve) => {
            this.mainInitialResolve = resolve;
            this.loadCurrentGroupComplete = false;
            this.initialQueue = assets;
            assets.forEach((asset) => {
                PIXI.loader.add(asset.id + "_font", this.getSlotPath(asset.atlasUrl, asset.isCommon));
                PIXI.loader.add(asset.id, this.getSlotPath(asset.fontUrl, asset.isCommon));
            });
            PIXI.loader.load(() => {
                this.loadProgressHandler();
                this.mainInitialResolve();
            });
            PIXI.loader.on("error", this.onError);
        });
    }
    onLoadProgress(initialQueue) {
    }
    loadLazyAsset(asset) {
        PIXI.loader.add(asset.id + "_png", this.getSlotPath(asset.atlasUrl, asset.isCommon));
        PIXI.loader.add(asset.id + "_fnt", this.getSlotPath(asset.fontUrl, asset.isCommon));
        PIXI.loader.onComplete.once(this.checkNextLazyAsset.bind(this));
        PIXI.loader.load(() => {
            this.loadProgressHandler();
        });
    }
    loadLazyGroup() {
        this.loadCurrentGroupComplete = false;
        if (this.lazyQueue.length > 0) {
            this.currentLazyGroup = this.lazyQueue.shift();
            LoaderModel.totalLazyGroupSize += this.currentLazyGroup.assets.length;
            this.loadLazyAsset(this.currentLazyGroup.assets.pop());
        }
        else {
            this.loadCurrentGroupComplete = true;
            this.mainLazyResolve();
        }
    }
    loadProgressHandler() {
        if (!this.loadCurrentGroupComplete) {
            this.dispatcher.dispatch(LoadEvents.LOAD_PROGRESS, LoaderModel.currentGroupSize(this.currentPriorityID));
        }
    }
    getSlotPath(data, isCommon) {
        const langFolder = isCommon ? "common" : GameInfo.lang;
        return (addFetchTimestamp("data/bitmapFonts/" + langFolder + "/" + data));
    }
}
//# sourceMappingURL=SlotBitmapFontsLoader.js.map