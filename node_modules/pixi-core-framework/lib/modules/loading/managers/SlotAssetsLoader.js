import { addFetchTimestamp, AssetsLoader, DeviceInfoService, GameInfo, LoaderConstants, LoaderModel, LoadEvents } from "general-framework";
import * as PIXI from "pixi.js";
import { AppLogger } from "../../../core/utils/logger/AppLogger";
import { AppLoggerMessageType } from "../../../core/utils/logger/AppLoggerMessageType";
import { TextureHolder } from "../../../core/utils/layouts/TextureHolder";
export class SlotAssetsLoader extends AssetsLoader {
    onLoadProgress(initialQueue, priority) {
        if (priority === LoaderConstants.GENERAL_PRIORITY) {
            initialQueue.forEach((asset) => {
                this.addToPixiLoader(asset);
            });
            PIXI.loader.load(() => {
                // this.slotLoadProgressHandler(initialQueue);
            });
            PIXI.loader.onLoad.add((loader, res) => {
                this.dispatcher.dispatch(LoadEvents.LOAD_PROGRESS, LoaderModel.currentGroupSize(this.currentPriorityID));
            });
            PIXI.loader.onComplete.add(() => {
                this.mainInitialResolve();
            });
            PIXI.loader.on("error", this.onError);
            return;
        }
        let asset = initialQueue[this.currentProgress];
        if (this.addToPixiLoader(asset)) {
            PIXI.loader.load(() => {
                this.slotLoadProgressHandler(initialQueue, priority);
            });
        }
        else {
            this.slotLoadProgressHandler(initialQueue, priority);
        }
        PIXI.loader.on("error", this.onError);
    }
    loadLazyAsset(asset) {
        if (!this.addToPixiLoader(asset)) {
            this.checkNextLazyAsset();
            return;
        }
        PIXI.loader.load(() => {
            this.dispatcher.dispatch(LoadEvents.LOAD_PROGRESS, LoaderModel.currentGroupSize(this.currentPriorityID));
            this.checkNextLazyAsset();
        });
    }
    getSlotAssetsJsonPath(data, isCommon) {
        let dpiPostfix = data.replace(".json", "-" + DeviceInfoService.dpi + ".json");
        const langFolder = isCommon ? "common" : GameInfo.lang;
        return ("data/assets/" + langFolder + "/" + dpiPostfix);
    }
    getSlotAssetsUrlPath(data, isCommon) {
        const langFolder = isCommon ? "common" : GameInfo.lang;
        return ("data/assets/" + langFolder + "/" + data);
    }
    getBitmapFontsPath(data, isCommon) {
        const langFolder = isCommon ? "common" : GameInfo.lang;
        return ("data/bitmapFonts/" + langFolder + "/" + data);
    }
    slotLoadProgressHandler(initialQueue, priority) {
        this.dispatcher.dispatch(LoadEvents.LOAD_PROGRESS, LoaderModel.currentGroupSize(this.currentPriorityID));
        this.currentProgress += 1;
        if (this.currentProgress < initialQueue.length) {
            this.onLoadProgress(initialQueue, priority);
        }
        else {
            this.currentProgress = 0;
            this.mainInitialResolve();
        }
    }
    addToPixiLoader(asset) {
        let configName;
        let urlParam;
        if (asset.jsonUrl) {
            configName = asset.jsonUrl.split("/")[0];
            urlParam = this.getSlotAssetsJsonPath(asset.jsonUrl, asset.isCommon);
        }
        else if (asset.assetUrl) {
            configName = asset.assetUrl;
            urlParam = this.getSlotAssetsUrlPath(asset.assetUrl, asset.isCommon);
        }
        else if (asset.fontUrl) {
            configName = asset.id + "_fnt";
            urlParam = this.getBitmapFontsPath(asset.atlasUrl, asset.isCommon);
            PIXI.loader.add(asset.id, addFetchTimestamp(this.getBitmapFontsPath(asset.fontUrl, asset.isCommon)));
        }
        else {
            AppLogger.log(`IAssetsGroup doesn't have correct url parameter`, AppLoggerMessageType.ERROR);
        }
        if (DeviceInfoService.isMobile) {
            if (asset.platform.indexOf("mobile") === -1) {
                return false;
            }
        }
        else if (asset.platform.indexOf("desktop") === -1) {
            return false;
        }
        if (PIXI.loader.resources[configName]) {
            AppLogger.log(configName + " already added to Loader");
            return false;
        }
        TextureHolder.setLayoutConfig(configName);
        PIXI.loader.add(configName, addFetchTimestamp(urlParam));
        return true;
    }
}
//# sourceMappingURL=SlotAssetsLoader.js.map