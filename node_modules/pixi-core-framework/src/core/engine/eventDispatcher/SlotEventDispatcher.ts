import * as EventEmitter from "eventemitter3";
import {AppLogger} from "../../utils/logger/AppLogger";
import {AppLoggerMessageType} from "../../utils/logger/AppLoggerMessageType";
import {BaseState} from "../fsm/BaseState";
import {BaseController} from "../BaseController";
import {BaseAction} from "../fsm/BaseAction";
import {BaseMediator} from "../BaseMediator";
import {BlastworksAPI, EventDispatcher, GoogleAnalytics} from "general-framework";

export class SlotEventDispatcher {
    private static _instance: SlotEventDispatcher = new SlotEventDispatcher();
    private _generalDispatcher: EventDispatcher = EventDispatcher.getInstance();

    constructor() {
        if (SlotEventDispatcher._instance) {
            throw new Error("Error: Instantiation failed: Use SlotEventDispatcher.getInstance() instead of new.");
        }
        SlotEventDispatcher._instance = this;

    }

    static getInstance(classInstance: any): SlotEventDispatcher {
        if (classInstance instanceof BaseState ||
            classInstance instanceof BaseController ||
            classInstance instanceof BaseAction ||
            classInstance instanceof BaseMediator) {
            return this._instance;
        } else {
            AppLogger.log("only classes, derived from BaseState, BaseController, BaseAction or BaseMediator, can access to SlotEventDispatcher",
                AppLoggerMessageType.ERROR);
        }
    }


    public addListener(event: string, fn: EventEmitter.ListenerFn, context?: any): void {
        this._generalDispatcher.addListener(event, fn, context);
    }

    public removeListener(event: string, fn?: EventEmitter.ListenerFn, context?: any, once?: boolean): void {
        this._generalDispatcher.removeListener(event, fn, context);
    }

    public once(event: string, fn: EventEmitter.ListenerFn, context?: any): void {
        this._generalDispatcher.once(event, fn, context);
    }

    public on(event: string, fn: EventEmitter.ListenerFn, context?: any): void {
        this._generalDispatcher.on(event, fn, context);
    }

    public off(event: string, fn?: EventEmitter.ListenerFn, context?: any, once?: boolean): void {
        this._generalDispatcher.off(event, fn, context, once);
    }

    public removeAllListeners(event?: string): void {
        this._generalDispatcher.removeAllListeners(event);
    }

    public dispatch(event: string, options?: any): void {
        // this.emit(event, options);
        if (!AppLogger.isProd) {
            this.logEvent(event, options);
        }
        if(BlastworksAPI.isBlastworksPostMessage) {
            BlastworksAPI.postData(event, options);
        }

        this._generalDispatcher.dispatch(event, options);
    }

    private logEvent(event: string, options?: any) {
        AppLogger.log(event, AppLoggerMessageType.EVENT, options);
    }
}
