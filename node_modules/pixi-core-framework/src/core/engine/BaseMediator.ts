import {SlotEventDispatcher} from "./eventDispatcher/SlotEventDispatcher";
import {getDispatcher} from "./createInstance";
import {BaseView} from "./BaseView";
import {LoaderConstants, LoadEvents} from "general-framework";

/**
 * Mediator is a header for views.
 * The Mediator is used to work with actions.
 * Use dispatcher for it.
 *
 */
export class BaseMediator {
    protected dispatcher: SlotEventDispatcher;
    protected view: BaseView;

    constructor(view: BaseView) {
        this.dispatcher = getDispatcher(this);
        this.view = view;
        this.addListeners();
    }

    public addListeners(): void {
        this.dispatcher.addListener(LoadEvents.ASSET_LOADED, this.init.bind(this));
        this.dispatcher.addListener(LoadEvents.PROJECT_LOADING_COMPLETE, this.initGeneral.bind(this));
    }

    protected init(groupID: string): void {
        if (this.view.groupID && this.view.groupID.indexOf(groupID) !== -1 && groupID !== LoaderConstants.GENERAL_PRIORITY) {
            this.view.init();
        }
    }
    protected initGeneral(groupID: string): void {
        if (this.view.groupID && this.view.groupID.indexOf(groupID) !== -1) {
            this.view.init();
        }
    }

    protected registerViewListener(uiEvent: string): void {
        this.view.addListener(uiEvent, (args) => {
            this.dispatcher.dispatch(uiEvent, args);
        });
    }

    protected removeListeners(): void {

    }
}
