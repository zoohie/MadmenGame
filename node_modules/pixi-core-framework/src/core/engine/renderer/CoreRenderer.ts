import {DeviceInfoService} from 'general-framework';

/**
 * Framework logic part
 */


export class CoreRenderer {
    public static renderer: any;
    public static iOSShiftPositionY: number = 0;
    public static iOSRenderHeightStep: number = 150;
    public static stage: PIXI.Container;
    protected static stagePosition: PIXI.Point;

    public static create(): void {
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            this.onDOMLoaded();
        } else {
            document.addEventListener('DOMContentLoaded', () => {
                this.onDOMLoaded()
            });
        }
    }

    public static pause(): void {
        PIXI.ticker.shared.stop();
    }

    public static resume(): void {
        PIXI.ticker.shared.start();
    }

    private static onDOMLoaded(): void {
        if (CoreRenderer.renderer) return;

        let app = new PIXI.Application({
            autoResize: true,
            resolution: devicePixelRatio,
            forceCanvas: DeviceInfoService.isCanvas()
        });

        app.renderer.view.style.position = "absolute";
        app.renderer.view.style.display = "block";
        app.renderer.autoResize = true;

        // app.renderer.resize(window.innerWidth, window.innerHeight);
        app.renderer.resize(document.documentElement.clientWidth, document.documentElement.clientHeight);

        CoreRenderer.stage = app.stage;
        CoreRenderer.renderer = app.renderer;

        //Render the stage
        PIXI.ticker.shared.add(() => {
            app.renderer.render(app.stage);
        });
        app.renderer.render(app.stage);
        this.stagePosition = new PIXI.Point(CoreRenderer.stage.x, CoreRenderer.stage.y);
        document.body.querySelector('.canvas-wrap').appendChild(CoreRenderer.renderer.view);
    }

    public static onResize(): void {
        if (DeviceInfoService.isIOs) {
            CoreRenderer.renderer.resize(document.documentElement.clientWidth, document.documentElement.clientHeight + this.iOSRenderHeightStep);
            CoreRenderer.stage.y = this.stagePosition.y + this.iOSShiftPositionY;
        } else {
            CoreRenderer.renderer.resize(document.documentElement.clientWidth, document.documentElement.clientHeight);
        }


    }

}
