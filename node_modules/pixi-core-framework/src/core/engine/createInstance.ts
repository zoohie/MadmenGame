import {Kernel} from "./Kernel";
import {Facade} from "./Facade";
import {IBaseModel} from "./interfaces/IBaseModel";
import {IServerModel} from "../../modules/server/interfaces/IServerModel";
import {SlotEventDispatcher} from "./eventDispatcher/SlotEventDispatcher";
import {CoreTimer} from "./renderer/CoreTimer";
import {CoreRenderer} from "./renderer/CoreRenderer";
import {EnterFrameManager} from "./renderer/EnterFrameManager";
import {TweenMax} from "gsap";
import {ViewComponentsFactory} from "../baseView/factories/ViewComponentsFactory";
import {DynamicViewCreator} from "../baseView/factories/DynamicViewCreator";
import {IViewComponent} from "../baseView/interfaces/IViewComponent";
import {SpineFactory} from "../baseView/factories/SpineFactory";
import {BaseSpineComponent} from "../baseView/components/BaseSpineComponent";
import {EventDispatcher} from "general-framework";
import {RendererManagerEvents} from "../../modules/renderModule/events/RendererManagerEvents";
import {BaseSpineAnimationProjection2d} from "../baseView/components/pixiProjection/BaseSpineAnimationProjection2d";

export function createInstance(constructor: Function, args?: any[]): any {
    return Kernel.createInstance(constructor, args);
}

export function bindTo(oldConstructor: Function, newConstructor: Function): void {
    Kernel.bindTo(oldConstructor, newConstructor);
}

export function bindMediator(mediatorClass: Function, viewClass: Function, layoutID: string, holderID: string = ""): void {
    DynamicViewCreator.bindMediator(mediatorClass, viewClass, layoutID, holderID);
}

export function getModel(classInstance: any, modelConstructor: Function): IBaseModel {
    return Facade.instance().getModel(classInstance, modelConstructor);
}

export function addModel(model: IBaseModel): void {
    Facade.instance().addModel(model);
}

export function addServerModel(model: IServerModel): void {
    Facade.instance().addServerModel(model);
}

export function getDispatcher(instance: any): SlotEventDispatcher {
    return SlotEventDispatcher.getInstance(instance);
}

export function getViewComponent(layoutID: string): IViewComponent {
    return ViewComponentsFactory.getInstance().getViewComponent(layoutID);
}

export function createNewView(layoutID: string): IViewComponent {
    return ViewComponentsFactory.getInstance().createNewView(layoutID);
}

export function getSpineClip(spineID: string): BaseSpineComponent {
    return SpineFactory.getInstance().getSpineClip(spineID);
}

export function getSpineClipProjection2d(spineID: string): BaseSpineAnimationProjection2d {
    return SpineFactory.getInstance().getSpineClipProjection2d(spineID);
}


export function freezeApp() {
    EventDispatcher.getInstance().dispatch(RendererManagerEvents.FREEZE_APP);
    CoreTimer.pauseAll();
    CoreRenderer.pause();
    EnterFrameManager.activate(false);
    TweenMax.pauseAll();
}

export function unfreezeApp() {
    EventDispatcher.getInstance().dispatch(RendererManagerEvents.UNFREEZE_APP);
    CoreTimer.resumeAll();
    CoreRenderer.resume();
    EnterFrameManager.activate(true);
    TweenMax.resumeAll();
}
