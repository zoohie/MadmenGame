import {ApplicationModule} from "./ApplicationModule";
import {createInstance} from "./createInstance";
import {ScreenMobileManager} from "../utils/screenMobileManager/ScreenMobileManager";
import {CommonFSMInitializer} from "./CommonFSMInitializer";


export class CommonModuleInitializer {

    constructor(protected  fsmInitializer: CommonFSMInitializer) {

    }

    protected _modules: ApplicationModule[] = [];

    /**
     * Add application logic modules. All new application entities should be
     * created only in module execute() method.
     * Should be overridden in  a game ApplicationModuleInitializer
     */
    public addModules(): void {

    }

    protected addModule(module: ApplicationModule): void {
        this._modules.push(module);
    }

    /**
     * You can bind your application classes to a core classes.
     * So finally your application class will be used instead of core class.
     * Must not be overridden in  a game ApplicationModuleInitializer
     */
    public bindClasses(): void {
        this._modules.forEach((module) => {
            module.bindClasses();
        });
    }

    /**
     * It's a system method.
     * invoke all registered modules (with addModule()).
     * Must not be overridden in  a game ApplicationModuleInitializer
     *
     */
    public invokeModules(): void {
        this._modules.forEach((module) => {
            module.execute();
        });
    }

    /**
     * abstract method. Must not be overridden in  a game ApplicationModuleInitializer
     *
     */
    public createFSM(): void {
        this.fsmInitializer.createFSM();
        this.fsmInitializer.addStates();
        this.fsmInitializer.startFSM();
    }

    /**
     * abstract method. Must not be overridden in  a game ApplicationModuleInitializer
     */
    public  manageMobile(): void {
        createInstance(ScreenMobileManager);
    }

}
