import {BaseState} from "./BaseState";
import {AppLogger} from "../../utils/logger/AppLogger";
import {AppLoggerMessageType} from "../../utils/logger/AppLoggerMessageType";

export class FSMContext {

    private _currentState: BaseState;
    protected states: Map<string, BaseState> = new Map<string, BaseState>();

    /**
     * Switching to a next state
     * @param stateId
     */
    public goto(stateId: string): void {
        if (!this.states[stateId]) {
            AppLogger.log(`${stateId} is not added to FSM`, AppLoggerMessageType.ERROR);
        }
        if (process.env.NODE_ENV !== 'production') {
            console.groupEnd();
            AppLogger.log(`=> FSM switched to ${stateId}`);
            console.group(`${stateId}`);
        }
        this._currentState = this.states[stateId];
        this._currentState.start().then( (state) => {
            this.goto(state);
        })
    }

    /**
     * Add state to FSM
     * @param state
     */
    public addState(state: BaseState): void {
        this.states[state.id] = state;
    }

    /**
     * Get current invoked state
     */
    get currentState(): BaseState {
        return this._currentState;
    }

}
