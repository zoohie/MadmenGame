import Container = PIXI.Container;
import {BaseRectangle} from "../BaseRectangle";
import {createNewView} from "../../../engine/createInstance";
import {BaseLabel} from "../BaseLabel";
import {IRadioButtonData, IColour} from "../../interfaces/IRadioButtonData";
import {BaseSprite} from "../BaseSprite";
import {LocalUtil} from "general-framework";

export class RadioButton extends PIXI.Container {
    protected defaultOffset: number = 12;
    protected normalState: Container;
    protected checkedState: Container;
    protected isChecked: boolean;
    protected textField: BaseLabel;
    protected textFieldActive: BaseLabel;
    protected _rectWidth: number;

    constructor(public text: string, data:IRadioButtonData) {
        super();
        this.create(text, data);
    }

    protected create(text: string, data:IRadioButtonData): void {
        const offset: number = data.textOffset !== undefined ? data.textOffset : this.defaultOffset;
        this.normalState = new Container();
        let _normal = createNewView(data.rectNormalTemplate);
        let height: number;
        if (_normal instanceof BaseRectangle) {
            this._rectWidth = _normal.rect.width;
            height = _normal.rect.height;
        } else if (_normal instanceof BaseSprite) {
            _normal.init();
            this._rectWidth = _normal.width;
            height = _normal.height;
        }
        let textField: BaseLabel = createNewView(data.labelNormalTemplate) as BaseLabel;
        this.textField = textField;
        textField.width = this._rectWidth - offset;
        textField.x = offset / 2;

        textField.setText(text);
        this.normalState.addChild(_normal as any);
        this.normalState.addChild(textField);
        textField.y = height / 2 - textField.height / 2;

        this.addChild(this.normalState);

        this.checkedState = new Container();

        let _checked = createNewView(data.rectCheckedTemplate);
        if (_checked instanceof BaseRectangle) {

        } else if (_checked instanceof BaseSprite) {
            _checked.init();
        }

        textField = createNewView(data.labelCheckedTemplate) as BaseLabel;
        this.textFieldActive = textField;
        textField.width = this._rectWidth - offset;
        textField.x = offset / 2;

        textField.setText(text);

        if (text === LocalUtil.text('Custom')) this.textFieldActive.isCustom = true;

        this.checkedState.addChild(_checked as any);
        this.checkedState.addChild(textField);
        textField.y = height / 2 - textField.height / 2;

        if( data.textColour ) {
            this.addHoverEffect( data.textColour );
        }

        this.addChild(this.checkedState);

        this.setChecked(false);

        this.buttonMode = true;
    }

    public setChecked(value: boolean): void {
        this.isChecked = value;
        this.normalState.visible = !value;
        this.checkedState.visible = value;
    }

    public getWidth(): number {
        return this._rectWidth;
    }

    public setText(text: string): void {
        this.textField.setText(text);
        this.textFieldActive.setText(text);
    }

    public get isCustom(): boolean {
        return !!this.textFieldActive.isCustom;
    }

    private addHoverEffect(data: IColour): void {
        this.on("mouseover", () => {
            if( this.isChecked ) {
                return;
            }

            this.textField.textField.style.fill = data.hover;
        });

        this.on("mouseout", () => {
            if( this.isChecked ) {
                return;
            }

            this.textField.textField.style.fill = data.normal;
        });

        this.on("mousedown", () => {
            this.textField.textField.style.fill = data.checked;
        });
    }
}
