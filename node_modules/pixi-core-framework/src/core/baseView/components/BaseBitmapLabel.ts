import {ILabelConfig} from "../interfaces/ILabelConfig";
import {AlignConstants} from "../AlignConstants";
import {BaseViewComponent} from "./BaseViewComponent";

export class BaseBitmapLabel extends BaseViewComponent {

    protected _sourceData: ILabelConfig;
    protected _scaleToWidth: boolean = false;
    protected _textField: PIXI.extras.BitmapText;
    protected _width: number;
    protected _align: string;

    constructor(data: ILabelConfig) {
        super(data);
        this._width = data.width;
        this._scaleToWidth = data.scaleToWidth;
        this.align = this.sourceData.align;
        if (data.angle !== undefined) {
            this.rotation = data.angle * (Math.PI / 180);
        }
    }

    public init(): void {
        this._textField = new PIXI.extras.BitmapText(this._sourceData.text, {
            font: `${this._sourceData.fontSize} ${this._sourceData.fontFamily}`,
            align: `${this._sourceData.align}`
        });
        this.alignText();
        this.addChild(this._textField);
    }

    public get sourceData(): ILabelConfig {
        return this._sourceData;
    }

    public get textField(): PIXI.extras.BitmapText {
        return this._textField;
    }

    get width(): number {
        return this._width;
    }

    get align(): string {
        return this._align;
    }

    set align(value: string) {
        this._align = value;
    }

    set width(value: number) {
        this._width = value;
    }

    public setText(value: string): void {
        this._textField.text = value;
        this.alignText();
    }

    public alignText(): void {
        if (this._scaleToWidth && this._textField.width > this.width) {
            let ratio: number = this._textField.width / this._textField.height;
            let newWidth = Math.min(this._textField.width, this.width);
            let newHeight = newWidth / ratio;
            this._textField.height = newHeight;
            this._textField.width = newWidth;
        }
        switch (this.align) {
            case AlignConstants.LEFT:
                this.textField.anchor = 0;
                break;
            case AlignConstants.CENTER:
                this.textField.anchor = 0.5;
                break;
            case AlignConstants.RIGHT:
                this.textField.anchor = 1;
                break;
        }

    }

    public setVisible(value: boolean): void{
        this.visible = value;
    }
}
