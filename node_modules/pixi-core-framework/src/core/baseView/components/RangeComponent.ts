import {BaseContainer} from "./BaseContainer";
import {BaseButton} from "./BaseButton";
import {BaseLabel} from "./BaseLabel";
import {IRangeComponentData} from "../interfaces/IRangeComponentData";
import Container = PIXI.Container;
import {BaseRectangle} from "./BaseRectangle";
import {PointerEventsConstants} from "../PointerEventsConstants";
import {RangeComponentConstants} from "../RangeComponentConstants";

export class RangeComponent extends Container {

    public static INCREASE_CLICKED: string = "INCREASE_CLICKED";
    public static DECREASE_CLICKED: string = "DECREASE_CLICKED";

    protected increaseButton: BaseButton;
    protected increaseButtonEnable: boolean;
    protected decreaseButton: BaseButton;
    protected decreaseButtonEnable: boolean;
    protected valueLabel: BaseLabel;

    protected  progressBar: BaseRectangle;

    constructor(protected source:BaseContainer) {
        super();
        this.increaseButton = source.getChildByName(RangeComponentConstants.INCREASE_BUTTON);
        this.increaseButton.on(PointerEventsConstants.CLICKED, (value: boolean) => {
            this.emit(RangeComponent.INCREASE_CLICKED);
        });
        this.decreaseButton = source.getChildByName(RangeComponentConstants.DECREASE_BUTTON);
        this.decreaseButton.on(PointerEventsConstants.CLICKED, (value: boolean) => {
            this.emit(RangeComponent.DECREASE_CLICKED);
        });
        this.valueLabel = source.getChildByName(RangeComponentConstants.VALUE_LABEL);
        this.progressBar = source.getChildByName(RangeComponentConstants.PROGRESS_BAR);
    }

    public updateComponent(data: IRangeComponentData): void {
        if (data.decrease !== undefined) {
            this.decreaseButton.enable(data.decrease);
            if (data.decrease) {
                this.decreaseButton.setVisible(true);
            }
        }
        if (data.increase !== undefined) {
            this.increaseButton.enable(data.increase);
            if (data.increase) {
                this.increaseButton.setVisible(true);
            };
        }
        data.labelValue !== undefined && this.valueLabel.setText(data.labelValue);
        this.progressBar.rect.scale.x = data.progressPercent;
    }

    public setVisible(value: boolean): void {
        this.source.visible = value;
    }

    public enable(value: boolean): void {
        if (value) {
            this.decreaseButton.enable(this.decreaseButtonEnable);
            this.increaseButton.enable(this.increaseButtonEnable);
        } else {
            this.decreaseButtonEnable = this.decreaseButton.isEnabled;
            this.increaseButtonEnable = this.increaseButton.isEnabled;
            this.decreaseButton.enable(false);
            this.increaseButton.enable(false);
        }
    }
}
