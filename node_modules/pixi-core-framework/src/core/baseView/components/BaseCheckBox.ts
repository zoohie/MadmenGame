import {IBaseCheckBoxConfig} from "../interfaces/IBaseCheckBoxConfig";
import Sprite = PIXI.Sprite;
import {TextureHolder} from "../../utils/layouts/TextureHolder";
import * as PIXI from "pixi.js"
import Graphics = PIXI.Graphics;
import {PointerEventsConstants} from "../PointerEventsConstants";
import {BaseViewComponent} from "./BaseViewComponent";
import {DeviceInfoService} from "general-framework";

/**
 * Framework logic part
 */
export class BaseCheckBox extends BaseViewComponent {

    public static PRESSED_STATE: string = "BaseCheckBox.PRESSED_STATE";
    public static HOVER_STATE: string = "BaseCheckBox.HOVER_STATE";
    public static UP_STATE: string = "BaseCheckBox.UP_STATE";

    protected state: string;
    protected onState: Sprite;
    protected offState: Sprite;

    protected _isEnabled: boolean;
    protected _isChecked: boolean = true;
    protected _sourceData: IBaseCheckBoxConfig;
    protected hitAreaPolygon: number[] = [];
    protected _hiTestObject: Graphics;

    constructor(data: IBaseCheckBoxConfig) {
        super(data);
        if (data.hitAreaPolygon !== undefined) {
            this.hitAreaPolygon = data.hitAreaPolygon;
        }
        if (data.angle !== undefined) {
            this.rotation = data.angle * (Math.PI / 180);
        }
    }

    public init(): void {
        if (this.onState) {
            return;
        }
        this.onState = TextureHolder.getLayoutTextureByName(this.sourceData.images.on);
        this.offState = TextureHolder.getLayoutTextureByName(this.sourceData.images.off);
        this.onState.visible = true;
        this.offState.visible = false;

        this.addChild(this.onState);
        this.addChild(this.offState);
        if (this.hitAreaPolygon.length > 0) {
            this._hiTestObject = this.drawPoly();
        } else {
            this._hiTestObject = this.drawRectangle();
        }
        this.addChild(this._hiTestObject);

        this._hiTestObject.interactive = true;
        this._hiTestObject.buttonMode = true;
        this.state = BaseCheckBox.UP_STATE;

        this._hiTestObject.on(PointerEventsConstants.POINTERDOWN, this.onButtonDown.bind(this));
        this._hiTestObject.on(PointerEventsConstants.CLICK, this.onButtonUp.bind(this));
        this._hiTestObject.on(PointerEventsConstants.POINTEROVER, this.onButtonOver.bind(this));
        this._hiTestObject.on(PointerEventsConstants.POINTEROUT, this.onButtonOut.bind(this));
        if (DeviceInfoService.isMobile) {
            this._hiTestObject.on(PointerEventsConstants.POINTERUP, this.onButtonUp.bind(this))
        }

    }

    public onAdded(): void {
        this.onState.visible = true;
    }

    public onButtonDown(): void {
        this.state = BaseCheckBox.PRESSED_STATE;
    }

    public onButtonUp(): void {
        if (this.state === BaseCheckBox.PRESSED_STATE ) {
            if (this._isChecked) {
                this._isChecked = false;
            } else {
                this._isChecked = true;
            }
            this.updateButton();
            this.emit(PointerEventsConstants.CLICKED, this.isChecked);
            this.state = BaseCheckBox.UP_STATE;
        }

    }

    public onButtonOver(): void {

    }

    public onButtonOut(): void {

    }

    public enable(value: boolean): void {
        this._hiTestObject.interactive = value;
        this._hiTestObject.buttonMode = value;
        this.isEnabled = value;
    }

    public setVisible(value: boolean): void {
        this.visible = value;
    }

    public get isEnabled(): boolean {
        return this._isEnabled;
    }

    public set isEnabled(value: boolean) {
        this._isEnabled = value;
    }

    public get isChecked(): boolean {
        return this._isChecked;
    }

    public set isChecked(value: boolean) {
        this._isChecked = value;
        this.updateButton();
    }

    public get sourceData(): IBaseCheckBoxConfig {
        return this._sourceData;
    }

    protected updateButton(): void {
        this.onState.visible = this._isChecked;
        this.offState.visible = !this._isChecked;
    }

    protected drawPoly(): Graphics {
        let graphics = new PIXI.Graphics();
        graphics.beginFill(0xffffff, 0);
        graphics.drawPolygon(this.hitAreaPolygon);
        graphics.endFill();
        return graphics
    }

    protected drawRectangle(): Graphics {
        let graphics = new PIXI.Graphics();
        graphics.beginFill(0xffffff, 0);
        graphics.drawRect(0, 0, this.onState.width, this.onState.height);
        graphics.endFill();
        return graphics
    }
}
