import {BaseController} from "../../engine/BaseController";
import {DeviceInfoService, LoadEvents} from "general-framework";
import {AppLogger} from "../logger/AppLogger";
import {AppLoggerMessageType} from "../logger/AppLoggerMessageType";


export abstract class ScreenMobileManager extends BaseController {
    protected screen: Screen | any = window.screen;
    protected canvas: HTMLElement = document.getElementById('canvas-wrap');
    protected btnFullScreen: HTMLElement = document.getElementById('full-screen-btn');
    protected rotateScreen: HTMLElement = document.getElementById('phoneOverlay');

    public static isOnFullScreenmode: boolean;

    protected constructor() {
        super();
        this.dispatcher.addListener(LoadEvents.INIT_MOBILE_MANAGER, () => {
            if (DeviceInfoService.isMobile) {
                // need to avoid handling the iOS Chrome - it not correct counts the innerWidth/Height on resize
                if (DeviceInfoService.isIOs && DeviceInfoService.isChrome) return;

                if (DeviceInfoService.isIOs) {
                    this.checkIframe();
                    if (!DeviceInfoService.isLandscape || DeviceInfoService.isLandscapeFullScreen) {
                        this.hideBtn();
                    } else {
                        this.showBtn();
                        this.addScrollUpListener();
                    }
                } else {
                    this.btnFullScreen.addEventListener("touchend", () => {
                        this.hideBtn();
                        ScreenMobileManager.turnOnFullScreen();
                    });
                    this.btnFullScreen.addEventListener("click", () => {
                        this.hideBtn();
                        ScreenMobileManager.turnOnFullScreen();
                    });
                }

                if (this.screen.orientation) {
                    // only for chrome, firefox
                    // automatically enable full screen
                    window.addEventListener("orientationchange", this.onOrientationChange.bind(this));
                } else {
                    // Important: on mobile resize event can occurs several times on change orientation

                    window.addEventListener("resize", this.onResize.bind(this));

                }

                this.handleFullScreenBtn();
                this.handleFullScreenOut();
            }
        });
    }

    protected addScrollUpListener(): void {
        let isStarted: boolean = false;
        this.btnFullScreen.addEventListener("touchstart", () => {
            isStarted = true;
        });
        this.btnFullScreen.addEventListener("touchend", () => {
            isStarted = false;
        });
        window.addEventListener("resize", () => {
            this.hideBtn();
        });

    }

    protected checkIframe(): void {
        if (window.location !== window.parent.location && DeviceInfoService.isMobile) {
            this.hideBtn();
        }
    }

    protected onResize(): void {

        this.handleFullScreenBtn();
        if (DeviceInfoService.isIOs) {
            this.checkIframe();
        }
    };

    protected onOrientationChange(): void {
        if (!DeviceInfoService.isIOs && !document.fullscreenElement) {
            this.showBtn();
            setTimeout(() => {
                this.checkCanRotate();
            }, 500)
        }
    };

    protected handleFullScreenOut(): void {
        document.addEventListener('fullscreenchange', (event) => {
            if (!DeviceInfoService.isIOs && !document.fullscreenElement) {
                this.showBtn();
            }
        });
    }

    /**
     * safari mobile/tablet dimensions:
     [320, 568],
     [375, 667],
     [375, 812],
     [414, 736],
     [768, 1024],
     [1024, 1366],
     [1112, 834]
     */
    // private handleIOsFullScreen() {
    //     const ratioScreen = (screen.width / screen.height).toFixed(2); // screen values aren't flipping by change orientation
    //     const {innerHeight: h, innerWidth: w} = window;
    //     const ratioInner = (w > h ? h / w : w / h).toFixed(2);
    //     (ratioInner === ratioScreen) ? this.hideBtn() : this.showBtn();
    // }

    protected handleFullScreenBtn(): void {

        if (!DeviceInfoService.isIOs) {
            if (!document.fullscreenElement) {
                this.showBtn();
            }
            /*if (DeviceInfoService.isLandscape) {

            }*/
        }
    }

    protected showBtn() {
        this.canvas.style.pointerEvents = 'none';
        this.btnFullScreen.style.display = 'block';
    }

    protected hideBtn() {
        this.canvas.style.pointerEvents = 'auto';
        this.btnFullScreen.style.display = 'none';
    }

    // attention: fullScreen API not supported for iOS Safari
    // it partition supported only for iPad
    public static turnOnFullScreen(): void {
        const elem: any = document.documentElement;

        if (elem.requestFullscreen) {
            elem.requestFullscreen().catch(err => {
                AppLogger.log("requestFullscreen doesn't work!", AppLoggerMessageType.ERROR);
            });
        } else if (elem.mozRequestFullScreen) {
            elem.mozRequestFullScreen();
        } else if (elem.webkitRequestFullscreen) {
            elem.webkitRequestFullscreen();
        } else if (elem.msRequestFullscreen) {
            elem.msRequestFullscreen();
        }
        this.isOnFullScreenmode = true;
    }

    public static turnOffFullScreen(): void {
        if (document.exitFullscreen) {
            document.exitFullscreen();
            // @ts-ignore
        } else if (document.mozCancelFullScreen) {
            // @ts-ignore
            document.mozCancelFullScreen();
        } else if ((document as any).webkitExitFullscreen) {
            (document as any).webkitExitFullscreen();
            // @ts-ignore
        } else if (document.msExitFullscreen) {
            // @ts-ignore
            document.msExitFullscreen();
        }
        this.isOnFullScreenmode = false;
    }

    protected checkCanRotate() {
        if (!DeviceInfoService.isLandscape && this.rotateScreen.style.visibility !== "hidden") {
            this.hideBtn();
        }
    }
}
