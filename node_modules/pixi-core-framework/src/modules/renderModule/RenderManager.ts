import {BaseController} from "../../core/engine/BaseController";
import {RendererManagerEvents} from "./events/RendererManagerEvents";
import {CoreRenderer} from "../../core/engine/renderer/CoreRenderer";
import {BaseRectangle} from "../../core/baseView/components/BaseRectangle";
import {IRenderViewParams} from "./IRenderViewParams";
import { LoadEvents} from "general-framework";

export class RenderManager extends BaseController {

    constructor() {
        super();
        this.dispatcher.addListener(RendererManagerEvents.SET_SAFE_AREA_VIEW, this.calculateViewPosition.bind(this));

        this.dispatcher.addListener(LoadEvents.INITIAL_LOADING_COMPLETE, () => {

            this.dispatcher.dispatch(RendererManagerEvents.GET_SAFE_AREA_VIEW);
        });
        this.dispatcher.addListener(LoadEvents.INIT_LOADER, () => {
            this.addWindowResizeListener();
        });
    }

    protected addWindowResizeListener(): void {
        window.addEventListener("resize", () => {
            this.dispatcher.dispatch(RendererManagerEvents.GET_SAFE_AREA_VIEW);
        });
    }

    /**
     * calculate resize parameters
     *
     * @param safeArea - we resize all games into this rectangle
     */
    protected calculateViewPosition(safeArea: BaseRectangle): void {
        CoreRenderer.onResize();
        let params: IRenderViewParams = new class implements IRenderViewParams {
            height: number;
            positionX: number;
            positionY: number;
            scale: number;
            width: number;
        };

        let newWidth: number;
        let newHeight: number;
        let maxWidth: number = safeArea.sourceData.width;
        let maxHeight: number = safeArea.sourceData.height;

        // let currentWidth: number = window.innerWidth;
        // let currentHeight: number = window.innerHeight;

        let currentWidth: number = document.documentElement.clientWidth;
        let currentHeight: number = document.documentElement.clientHeight;

        const ratio: number = maxWidth / maxHeight;
        const currRatio: number = currentWidth / currentHeight;
        let scaleTo: number;

        let newX: number = 0;
        let newY: number = 0;

        if (currRatio < ratio) {
            newWidth = Math.max(maxWidth, currentWidth);
            newHeight = newWidth / ratio;
            scaleTo = currentWidth / maxWidth;
            newY = (currentHeight - maxHeight * scaleTo) / 2;
        } else {
            newHeight = Math.max(maxHeight, currentHeight);
            newWidth = newHeight * ratio;
            scaleTo = currentHeight / maxHeight;
            newX = (currentWidth - maxWidth * scaleTo)/2 ;
        }
        params.height = newWidth;
        params.width = newHeight;
        params.scale = scaleTo;

        newX = scaleTo * safeArea.sourceData.posX / 2 + newX;
        newY = scaleTo * safeArea.sourceData.posY / 2 + newY;

        params.positionX = newX;
        params.positionY = newY;
        this.dispatcher.dispatch(RendererManagerEvents.RESIZE, params);
    }
}
