import {BaseMediator} from "../../../core/engine/BaseMediator";
import {PreloaderView} from "../view/PreloaderView";
import {RendererManagerEvents} from "../../renderModule/events/RendererManagerEvents";
import {IRenderViewParams} from "../../renderModule/IRenderViewParams";
import {DeviceInfoService, LoadEvents} from "general-framework";

export class PreloaderMediator extends BaseMediator {

    protected view: PreloaderView;
    protected canShow: boolean = false;

    public addListeners(): void {
        super.addListeners();
        this.dispatcher.addListener(LoadEvents.RESET_LOADER_VIEW, this.resetLoaderView, this);
        this.dispatcher.addListener(LoadEvents.LOAD_PROGRESS, this.updateProgress, this);
        this.dispatcher.addListener(LoadEvents.HIDE_LOADER, this.hideView, this);

        this.dispatcher.addListener(RendererManagerEvents.RESIZE, this.onResize, this);
        this.registerViewListener(LoadEvents.LOADING_COMPLETE);
    }

    /**
     * @LoadEvent.LOAD_PROGRESS
     * update progress bar for each loaded asset**/

    protected hideView(): void {
        this.canShow = false;
        this.view.removeLoader();
    }

    protected resetLoaderView(): void {
        this.canShow = true;
        this.view.resetLoaderView();
        this.checkDeviceMode();
    }

    protected updateProgress(progress: number): void {
        this.view.updateProgress(progress);
    }

    protected onResize(params: IRenderViewParams): void {
        this.view.onResize(params);
        this.checkDeviceMode();
    }

    protected checkDeviceMode(): void {
        if (DeviceInfoService.isLandscape) {
            this.canShow && this.view.show();
        } else {
            this.view.hide();
        }
    }
}
