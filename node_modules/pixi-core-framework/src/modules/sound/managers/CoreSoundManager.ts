import {Sound} from "../Sound";
import {AppLogger} from "../../../core/utils/logger/AppLogger";
import {AppLoggerMessageType} from "../../../core/utils/logger/AppLoggerMessageType";
import {BaseController} from "../../../core/engine/BaseController";
import {ISoundData} from "../interface/ISoundData";
import {IAssociative} from "../../../core/engine/interfaces/IAssociative";
import {EventDispatcher} from "general-framework";
import {CoreSoundEvents} from "../events/CoreSoundEvents";
import {CoreSoundModel} from "../model/CoreSoundModel";
import {TweenMax} from "gsap";
import {IVolumeData} from "../interface/IVolumeData";
import {ITweenVolumeData} from "../interface/ITweenVolumeData";

export class CoreSoundManager extends BaseController {
    private soundsMap: IAssociative<Sound> = {};
    private allSounds: Sound[] = [];
    protected tweensMap: IAssociative<TweenMax> = {};

    protected addListeners() {
        EventDispatcher.getInstance().addListener(CoreSoundEvents.FREEZE_ALL_SOUNDS, this.freezeSounds.bind(this));
        this.dispatcher.addListener(CoreSoundEvents.PLAY_SOUND, this.playSound.bind(this));
        this.dispatcher.addListener(CoreSoundEvents.STOP_SOUND, this.stopSound.bind(this));
        this.dispatcher.addListener(CoreSoundEvents.PAUSE_SOUND, this.pauseSound.bind(this));
        this.dispatcher.addListener(CoreSoundEvents.UNPAUSE_SOUND, this.unPauseSound.bind(this));
        this.dispatcher.addListener(CoreSoundEvents.MUTE_SOUND, this.muteSound.bind(this));
        this.dispatcher.addListener(CoreSoundEvents.UNMUTE_SOUND, this.unMuteSound.bind(this));
        this.dispatcher.addListener(CoreSoundEvents.MUTE_ALL_SOUNDS, this.muteAllSounds.bind(this));
        this.dispatcher.addListener(CoreSoundEvents.MAP_SOUND, this.mapSounds.bind(this));
        this.dispatcher.addListener(CoreSoundEvents.SET_TWEEN_VOLUME, this.tweenVolume.bind(this));
        this.dispatcher.addListener(CoreSoundEvents.SET_VOLUME, this.setVolume.bind(this));
    }

    private getSoundDuration(id: string): number {
        return this.soundsMap[id].duration();
    }

    protected playSound(data: ISoundData): void {
        if (this.soundsMap[data.id]) {
            this.soundsMap[data.id].isLoop = data.loop;
            this.soundsMap[data.id].loop(data.loop);
            this.soundsMap[data.id].isActive = true;
            this.soundsMap[data.id].play();
            this.soundsMap[data.id].on("end", () => {
                if (!data.loop && data.onComplete) {
                    data.onComplete(data.id);
                }
                if (!data.loop) {
                    this.onSoundComplete(data.id);
                    this.soundsMap[data.id].off("end");
                }

            })
        }
    }

    protected stopSound(data: ISoundData): void {
        if (this.soundsMap[data.id] && this.soundsMap[data.id].isActive) {
            this.soundsMap[data.id].off("end");
            this.soundsMap[data.id].stop();
            this.soundsMap[data.id].isActive = false;
        }

        if (this.tweensMap[data.id] && this.tweensMap[data.id].isActive()) {
            this.tweensMap[data.id].kill();
        }
    }

    protected pauseSound(data: ISoundData): void {
        if (this.soundsMap[data.id] && this.soundsMap[data.id].isActive && !this.soundsMap[data.id].isOnPause) {
            this.soundsMap[data.id].isOnPause = this.soundsMap[data.id].isActive;
            this.soundsMap[data.id].pause();
        }
    }

    protected unPauseSound(data: ISoundData): void {
        if (this.soundsMap[data.id] && this.soundsMap[data.id].isOnPause) {
            this.soundsMap[data.id].isOnPause = !this.soundsMap[data.id].isActive;
            this.soundsMap[data.id].play();
        }
    }

    protected muteSound(data: ISoundData): void {
        if (this.soundsMap[data.id]) {
            this.soundsMap[data.id].mute(true);
        }
    }

    protected unMuteSound(data: ISoundData): void {
        if (this.soundsMap[data.id]) {
            this.soundsMap[data.id].mute(false);
        }
    }

    protected muteAllSounds(value: boolean): void {
        Howler.mute(!value);
    }

    //return callback function if needed after tween complete
    protected tweenVolume(data: ITweenVolumeData): void {

        if (this.soundsMap[data.id]) {
            this.soundsMap[data.id].volumeValue = data.fromVolume;

            if (this.tweensMap[data.id] && this.tweensMap[data.id].isActive()) {
                this.tweensMap[data.id].kill()
            }

            this.tweensMap[data.id] = TweenMax.to(this.soundsMap[data.id], data.duration, {
                volumeValue: data.toVolume,
                onComplete: () => {
                    if (data.callback) {
                        data.callback()
                    }
                }
            })
        }
    }

    protected setVolume(data: IVolumeData): void {
        if (this.soundsMap[data.id]) {
            this.soundsMap[data.id].volume(data.value);
        }
    }

    protected mapSounds(sound: Sound): void {
        this.soundsMap[sound.id] = sound;
        this.allSounds.push(sound);
    }

    protected onSoundComplete(id: string): void {
        this.soundsMap[id].isActive = false;
        AppLogger.log("Sound: " + id + " PLAYING COMPLETE", AppLoggerMessageType.DEFAULT);
    }

    protected freezeSounds(value): void {
        if (value) {
            this.muteAllSounds(!value)
        } else {
            if (CoreSoundModel.getIsSoundOn()) {
                this.muteAllSounds(!value)
            }
        }
    }
}
