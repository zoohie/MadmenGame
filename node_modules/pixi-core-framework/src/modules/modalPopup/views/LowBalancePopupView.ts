import {BaseView} from "../../../core/engine/BaseView";
import {BaseButton} from "../../../core/baseView/components/BaseButton";
import {DisplayObject, Container} from 'pixi.js';
import {ModalPopupEvents} from "../events/ModalPopupEvents";
import {IRenderViewParams} from "../../renderModule/IRenderViewParams";
import {BaseRectangle} from "../../../core/baseView/components/BaseRectangle";
import {CoreRenderer} from "../../../core/engine/renderer/CoreRenderer";

export class LowBalancePopupView extends BaseView {
    protected closeButton: BaseButton;
    protected closeButtonBig: BaseButton;
    protected overlay: BaseRectangle;

    protected initSourceData(): void {
        this.closeButton = this.addUIElement("close_btn", ModalPopupEvents.HIDE_LOW_BALANCE_POPUP);
        this.closeButtonBig = this.addUIElement("close_btn_big", ModalPopupEvents.HIDE_LOW_BALANCE_POPUP);

        this.overlay = this.source.getChildByName("overlay") as BaseRectangle;
        this.overlay.interactive = true;
    }

    protected addUIElement<T extends DisplayObject = Container>(childName: string, uiEvent: string): T {
        const uiElement: T = this.source.getChildByName(childName);

        uiElement.on("clicked", (value: boolean) => {
            this.emit(uiEvent);
        });

        return uiElement;
    }

    show(): void {
        super.show();

        CoreRenderer.stage.addChild(this.source);
    }

    public onResize(params: IRenderViewParams) {
        if (!this.overlay) {
            return;
        }

        if (params.width && params.height) {
            this.source.scale.x = this.source.scale.y = params.scale;
        }

        this.source.position.set(params.positionX, params.positionY);
    }

    hide(): void {
        super.hide();
        
        CoreRenderer.stage.removeChild(this.source);
    }
}
