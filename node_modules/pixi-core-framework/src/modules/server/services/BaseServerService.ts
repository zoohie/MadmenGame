import {Facade} from "../../../core/engine/Facade";
import {BaseController} from "../../../core/engine/BaseController";
import {createInstance, getModel} from "../../../core/engine/createInstance";
import {IResponseData} from "../interfaces/IResponseData";
import {ErrorServerModel} from "../../modalPopup/models/ErrorServerModel";
import {ModalPopupEvents} from "../../modalPopup/events/ModalPopupEvents";
import {ModalPopupVO} from "../../modalPopup/events/ModalPopupVO";
import {ModalPopupUtil} from "../../modalPopup/util/ModalPopupUtil";
import {IServerModel} from "../interfaces/IServerModel";
import {ServerRequest} from "general-framework";

export class BaseServerService extends BaseController {

    protected targetService: ServerRequest;

    /**
     * This is a common method to fetch responses from server.
     * We have 3 possibilities to fetch with timeout 20 sec
     * @param body optional post parameters (Depends on server API)
     * @param params optional getParams to add in request
     */
    protected fetch(requestBody: any, responseType: string, params = {}): Promise<any> {
        if (this.targetService === undefined) {
            this.targetService = createInstance(ServerRequest, [responseType]);
        }
        return this.targetService.fetch(requestBody, params);
    }

    protected onRequest(data: IResponseData, modelConstructor?: Function): void {
        if (modelConstructor) {
            let serverModel: IServerModel = getModel(this, modelConstructor) as IServerModel;
            serverModel.parseResponse(data);
        } else {
            Facade.instance().getServerModels(this).forEach((serverModel) => {

                serverModel.parseResponse(data);
            });
        }

        this.checkServerErrorMessages();
    }

    protected checkServerErrorMessages(error?: any): void {

        const errorServerModel: ErrorServerModel = getModel(this, ErrorServerModel) as ErrorServerModel;
        if (error) {
            errorServerModel.parseResponse(error);
        }
        if (errorServerModel.status === "error" || errorServerModel.code) {
            const data: ModalPopupVO = ModalPopupUtil.getModalPopupData(errorServerModel.code, errorServerModel.messageHeader, errorServerModel.messageBody)
            this.dispatcher.dispatch(ModalPopupEvents.SHOW_MODAL_POPUP, data);
        }
    }
}
