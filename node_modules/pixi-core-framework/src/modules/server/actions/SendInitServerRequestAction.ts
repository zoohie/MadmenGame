import {BaseAction} from "../../../core/engine/fsm/BaseAction";
import {CoreServerServiceEvents} from "../events/CoreServerServiceEvents";
import {AppLogger} from "../../../core/utils/logger/AppLogger";
import {getModel} from "../../../core/engine/createInstance";
import {CoreInitParamsModel} from "../models/CoreInitParamsModel";
import {PingController} from "general-framework";

export class SendInitServerRequestAction extends BaseAction {

    protected mainResolve: Function;

    execute(): Promise<any> {
        AppLogger.log(`${this.constructor.name}`);
        return new Promise<any>((resolve) => {
            this.mainResolve = resolve;
            this.dispatcher.addListener(CoreServerServiceEvents.RECEIVE_INIT_RESPONSE, this.onInitResponse, this);
            this.dispatcher.dispatch(CoreServerServiceEvents.SEND_INIT_REQUEST);
        });
    }

    protected onInitResponse(): void {
        this.updateTitle();
        PingController.startPing();
        this.mainResolve();
    }

    protected updateTitle(): void {
        const userInitModel: CoreInitParamsModel = getModel(this, CoreInitParamsModel) as CoreInitParamsModel;
        if (userInitModel.gameName) {
            let newTitle = userInitModel.gameName + " by " + document.title;
            document.title = newTitle;
        }
    }
}
