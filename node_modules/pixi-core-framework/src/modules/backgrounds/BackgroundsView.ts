import {BaseView} from "../../core/engine/BaseView";
import {CoreRenderer} from "../../core/engine/renderer/CoreRenderer";
import {TweenLite} from "gsap";
import {BaseContainer} from "../../core/baseView/components/BaseContainer";
import {getViewComponent} from "../../core/engine/createInstance";
import {IRenderViewParams} from "../renderModule/IRenderViewParams";

/**
 * Framework logic part
 */
export class BackgroundsView extends BaseView {

    protected currentBackground: BaseContainer;
    protected backgroundToShow: BaseContainer;
    protected animationTween: any[] = [];
    protected defaultWidth: number;
    protected defaultHeight: number;
    protected currentResizeParams: IRenderViewParams;

    protected initSourceData(): void {
        this.currentBackground = this.source.getChildByName("main_background");
        CoreRenderer.stage.addChild(this.source);
        this.hide();
    }

    public onResize(params: IRenderViewParams): void {
        this.currentResizeParams = params;
        if (params.width && params.height) {
            this.source.scale.x = this.source.scale.y = params.scale;
        }

        let currentWidth: number = document.documentElement.clientWidth;
        let currentHeight: number = document.documentElement.clientHeight;
        const currentRatio: number = currentHeight / currentWidth;
        const defaultRatio: number = this.defaultHeight / this.defaultWidth;

        if (currentWidth > this.defaultWidth * params.scale || currentHeight > this.defaultHeight * params.scale) {
            if (defaultRatio > currentRatio) {
                this.source.width = currentWidth;
                this.source.height = Math.round(this.source.width * this.defaultHeight / this.defaultWidth);
            } else {
                this.source.height = currentHeight;
                this.source.width = Math.round(this.source.height * this.defaultWidth / this.defaultHeight);
            }
        }
        this.source.position.x = currentWidth / 2 - this.source.width / 2;
        this.source.position.y = currentHeight / 2 - this.source.height / 2;
    }

    public changeBackground(backgroundID: string): void {
        this.backgroundToShow = this.source.getChildByName(backgroundID + "_background");
        if (this.backgroundToShow.children.length === 0) {
            let viewComponent: any = getViewComponent(backgroundID + "_background_content");
            viewComponent.children.forEach((item) => {
                item.init();
            })
            viewComponent.init();
            viewComponent.vissible = true;
            this.backgroundToShow.addChild(viewComponent);
        }
        this.defaultWidth = Math.round(this.backgroundToShow.width);
        this.defaultHeight = Math.round(this.backgroundToShow.height);

        this.backgroundToShow.alpha = 0;
        this.source.addChild(this.backgroundToShow);
        this.startAnimation(this.backgroundToShow);
    }

    protected startAnimation(backgroundToShow: BaseContainer): void {
        this.animationTween.push(TweenLite.to(backgroundToShow, .6, {
            alpha: 1, onComplete: () => {
            }
        }));
        this.onResize(this.currentResizeParams);
    }

}
