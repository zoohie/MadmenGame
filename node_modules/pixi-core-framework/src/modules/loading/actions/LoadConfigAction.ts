import {BaseAction} from "../../../core/engine/fsm/BaseAction";
import {EventDispatcher, GameInfo, LoadEvents} from "general-framework";
import {ConfigPathData} from "../../../ConfigPathData";
import {ViewComponentsFactory} from "../../../core/baseView/factories/ViewComponentsFactory";

export class LoadConfigAction extends BaseAction{

    protected generalDispatcher: EventDispatcher = EventDispatcher.getInstance();

    /**
     * Dispatch event to load configs and listen for event about finish of loading
     */
    execute(): Promise<any> {
        return new Promise<any>((resolve) => {
            this.dispatcher.addListener(LoadEvents.VIEW_COMPONENTS_FACTORY_DATA_RECEIVED, (data) => {
                ViewComponentsFactory.getInstance().parseViewList(data);
            })
            this.dispatcher.addListener(LoadEvents.GAME_PARAMS_DATA_RECEIVED, this.onGameParamsLoaded, this)
            this.dispatcher.addListener(LoadEvents.CONFIG_LOADED, () => {
                resolve();
            });
            this.dispatcher.dispatch(LoadEvents.LOAD_CONFIGS, ConfigPathData);
        });
    }

    protected onGameParamsLoaded(data): void {
        GameInfo.init(data.gameName);
    }
}
