import {BaseAction} from "../../../core/engine/fsm/BaseAction";
import {EventDispatcher, ISpineConfig, LoaderConstants, LoadEvents} from "general-framework";
import {SpineFactory} from "../../../core/baseView/factories/SpineFactory";

export class LoadSpineGeneralDataAction extends BaseAction {

    protected generalDispatcher: EventDispatcher = EventDispatcher.getInstance();

    /**
     * Dispatch event to load configs and listen for event about finish of loading
     */
    execute(): Promise<any> {
        return new Promise<any>((resolve) => {
            this.dispatcher.addListener(LoadEvents.SPINE_FACTORY_DATA_RECEIVED, (data: ISpineConfig) => {
                SpineFactory.getInstance().mapSpine(data.dataParse, data.id);
            })
            this.generalDispatcher.addListener(LoadEvents.SPINE_DATA_LOADED, () => {
                resolve();
            });
            this.generalDispatcher.dispatch(LoadEvents.LOAD_SPINE_DATA, LoaderConstants.GENERAL_PRIORITY);

        });
    }
}
