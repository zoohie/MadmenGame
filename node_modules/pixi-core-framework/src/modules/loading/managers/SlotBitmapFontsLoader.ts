import {BitmapFontsLoader, LoaderModel, LoadEvents, GameInfo, addFetchTimestamp} from "general-framework";
import {IBitmapFontGroup} from "../interface/IBitmapFontsLoader";
import * as PIXI from "pixi.js";

export class SlotBitmapFontsLoader extends BitmapFontsLoader {

    protected loadCurrentGroupComplete: boolean;

    protected loadQueue(assets: IBitmapFontGroup[]): Promise<any> {
        return new Promise<any>((resolve) => {
            this.mainInitialResolve = resolve;
            this.loadCurrentGroupComplete = false;
            this.initialQueue = assets;
            assets.forEach((asset) => {
                PIXI.loader.add(asset.id + "_font", this.getSlotPath(asset.atlasUrl, asset.isCommon));
                PIXI.loader.add(asset.id, this.getSlotPath(asset.fontUrl, asset.isCommon));
            });
            PIXI.loader.load(() => {
                this.loadProgressHandler();
                this.mainInitialResolve();
            });
            PIXI.loader.on("error", this.onError);
        })
    }

    protected onLoadProgress(initialQueue: IBitmapFontGroup[]): void {
    }

    protected loadLazyAsset(asset: IBitmapFontGroup): void {
        PIXI.loader.add(asset.id + "_png", this.getSlotPath(asset.atlasUrl, asset.isCommon));
        PIXI.loader.add(asset.id + "_fnt", this.getSlotPath(asset.fontUrl, asset.isCommon));
        PIXI.loader.onComplete.once(this.checkNextLazyAsset.bind(this));
        PIXI.loader.load(() => {
            this.loadProgressHandler();
        });
    }

    protected loadLazyGroup(): void {
        this.loadCurrentGroupComplete = false;
        if (this.lazyQueue.length > 0) {
            this.currentLazyGroup = this.lazyQueue.shift();
            LoaderModel.totalLazyGroupSize += this.currentLazyGroup.assets.length;
            this.loadLazyAsset(this.currentLazyGroup.assets.pop());
        } else {
            this.loadCurrentGroupComplete = true;
            this.mainLazyResolve();
        }
    }

    protected loadProgressHandler() {
        if (!this.loadCurrentGroupComplete) {
            this.dispatcher.dispatch(LoadEvents.LOAD_PROGRESS, LoaderModel.currentGroupSize(this.currentPriorityID));
        }
    }

    protected getSlotPath(data: string, isCommon: boolean): string {
        const langFolder: string = isCommon ? "common" : GameInfo.lang;
        return (addFetchTimestamp("data/bitmapFonts/" + langFolder + "/" + data));
    }

}
