import {ModalPopupEvents} from "../events/ModalPopupEvents";
import {EventDispatcher} from "../../EventDispatcher";
import {ICustomMessage} from "../interfaces/ICustomMessage";
import {CustomMessageModel} from "../models/CustomMessageModel";
import {ServerRequest} from "../../server/ServerRequest";
import {RealityCheckModel} from "../../reality-check/RealityCheckModel";

export class ModalPopupController {

    protected dispatcher = EventDispatcher.getInstance();
    protected currentMessageCount: number = 0;
    protected messagesList: ICustomMessage[] = [];
    protected targetService: ServerRequest;

    constructor() {
        this.dispatcher.addListener(ModalPopupEvents.CUSTOM_SHOW_ALL_MESSAGES, this.showAllMessages, this);
        this.dispatcher.addListener(ModalPopupEvents.CUSTOM_EVENT_CONTINUE, this.continue, this);
        this.dispatcher.addListener(ModalPopupEvents.CUSTOM_EVENT_EXIT, this.exit, this);
        this.dispatcher.addListener(ModalPopupEvents.CUSTOM_EVENT_HISTORY, this.history, this);
        this.dispatcher.addListener(ModalPopupEvents.CUSTOM_EVENT_CHOICE, this.choice, this);
        this.dispatcher.addListener(ModalPopupEvents.CUSTOM_EVENT_CLOSE, this.close, this);
    }

    /**
     * Method runs custom message action
     * @param url - unnecessary action parameter
     */
    protected continue(url: string = ""): void {
        if (url.length > 0) {
            this.fetch({}, url, {}).then();
        }
        this.dispatcher.dispatch(ModalPopupEvents.HIDE_MODAL_POPUP);
    }

    /**
     * Method runs custom message action
     * @param url - unnecessary action parameter
     */
    protected exit(url: string = ""): void {
        if (url.length > 0) {
            this.fetch({}, url, {}).then();
        }
        setTimeout(() => {
            window.top.location.href = RealityCheckModel.lobby_URL;
        });
    }

    /**
     * Method runs custom message action
     * @param url - unnecessary action parameter
     */
    protected history(url: string = ""): void {
        if (url.length <= 0) {
            url = RealityCheckModel.history_URL
        }
        setTimeout(() => {
            window.top.location.href = url;
        });
    }

    /**
     * Method runs custom message action
     * @param url - unnecessary action parameter
     */
    protected choice(url: string = ""): void {
        this.fetch({}, url, {}).then();
        this.dispatcher.dispatch(ModalPopupEvents.HIDE_MODAL_POPUP);
    }

    /**
     * Method runs custom message action
     * @param url - unnecessary action parameter
     */
    protected close(url: string = ""): void {
        if (url.length <= 0) {
            url = RealityCheckModel.lobby_URL
        }
        setTimeout(() => {
            window.top.location.href = url;
        });
    }
    /**
     * This is a common method to fetch responses from server.
     * @param requestBody optional post parameters (Depends on server API)
     * @param params optional getParams to add in request
     * @param params responseType - server response type (Depends on custom message action)
     */
    protected fetch(requestBody: any, responseType: string, params = {}, method: string = 'post'): Promise<any> {
        if (this.targetService === undefined) {
            this.targetService = new ServerRequest(responseType,null, {isNotPopup: true});
        }
        return this.targetService.fetch(requestBody, params, method);
    }

    /**
     * Method runs parsing of all custom messages
     * @param messagesList - list of custom messages
     */
    protected showAllMessages(messagesList: ICustomMessage[]): void {
        this.messagesList = messagesList;
        this.currentMessageCount = 0;
        this.checkNextMessage();
    }

    /**
     * Method parse and construct each message
     * @event CUSTOM_ALL_MESSAGES_SHOW_COMPLETE - event dispatch finish of showing all custom messages and continue game
     */
    protected checkNextMessage(): void {
        if (this.currentMessageCount === this.messagesList.length) {
            this.dispatcher.dispatch(ModalPopupEvents.CUSTOM_ALL_MESSAGES_SHOW_COMPLETE);
            return
        }
        this.dispatcher.once(ModalPopupEvents.HIDE_MODAL_POPUP, () => {
            this.currentMessageCount += 1;
            this.checkNextMessage();
        });
        const customMessageModel: CustomMessageModel = new CustomMessageModel();
        this.dispatcher.dispatch(ModalPopupEvents.SHOW_MODAL_POPUP, customMessageModel.getData(this.messagesList[this.currentMessageCount].message), false);
    }
}
