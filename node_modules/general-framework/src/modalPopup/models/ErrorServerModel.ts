import {LocalUtil} from "../../localization/LocalUtil";

/**
 * Parse, save and give the data from response on fetch error
 */
export class ErrorServerModel {

    private _status: string;
    private _code: string;
    private _messageHeader: string;
    private _messageBody: string;

    /**
     * Parse data from error
     * @param {object} data
     */
    public parseResponse(data): void { // TODO: type for "data"
        this._status = data.status;
        this._messageHeader = data.message;
        if (data.errors) {
            const body = LocalUtil.text(data.errors[0].code.toString());
            if (body) {
                this._messageHeader = null;
                this._messageBody =  body;
            } else {
                this._messageBody =  data.errors[0].message;
            }
            this._code = data.errors[0].code.toString();
        }
    }

    /**
     * Clear all response values
     */
    public clear(): void {
        this._status = null;
        this._code = null;
        this._messageBody = null;
        this._messageHeader = null;
    }

    /**
     * Getter to return body message
     * @returns {string}
     */
    get messageBody(): string {
        return this._messageBody;
    }

    /**
     * Getter to return header message
     * @returns {string}
     */
    get messageHeader(): string {
        return this._messageHeader;
    }

    /**
     * Getter to return code from error
     * @returns {string} - must be the number as the initial type
     */
    get code(): string {
        return this._code;
    }

    /**
     * Getter to return status from error
     * @returns {string} - must be the number as the initial type
     */
    get status(): string {
        return this._status;
    }
}
