import {ModalPopupEvents} from "./events/ModalPopupEvents";
import {ModalPopupVO} from "./interfaces/ModalPopupVO";
import {ModalPopupView} from "./ModalPopupView";
import {EventDispatcher} from "../EventDispatcher";
import {getModalPopupStyles} from "./util/getModalPopupStyles";
import {IModalPopupStyles} from "./interfaces/IModalPopupStyles";
import {ModalPopupController} from "./controller/ModalPopupController";

/**
 * To use modal first create instance:
 *      -> const modal = new ModalPopup()
 * than inject styles to html head tag:
 *      -> modal.insertPopupStyles([,yourStyles])
 * now you can use it with:
 *      -> dispatcher.dispatch(event [, dataWithTextButtons]);
 */

/**
 * Controller to create and manage of modal popup.
 * @method showModalPopup
 * @method hideModalPopup
 * @method insertPopupStyles
 */
export class ModalPopup {

        // creating of instances
    private dispatcher = EventDispatcher.getInstance();
    protected view: ModalPopupView = new ModalPopupView();
    private _controller: ModalPopupController = new ModalPopupController();

    constructor() {
        // adding listeners to show/hide modal popup
        this.dispatcher.addListener(ModalPopupEvents.SHOW_MODAL_POPUP, this.showModalPopup, this);
        this.dispatcher.addListener(ModalPopupEvents.HIDE_MODAL_POPUP, this.hideModalPopup, this);
        this.view.emit = this.onViewEmit.bind(this);
    }

    /**
     * Calling view method to show modal popup
     * @param data
     */
    public showModalPopup(data: ModalPopupVO): void {
        this.view.showPopup(data);
    }

    /**
     * Calling view method to hide modal popup
     */
    public hideModalPopup(): void {
        this.view.hidePopup();
    }

    /**
     * Injecting of prepared styles with the possibility of their modification
     * This method create style tag and insert in it prepared styles
     * It's possible to customize default styles for current project
     * @param styles
     */
    public insertPopupStyles(styles?: IModalPopupStyles): void {
        const head = document.getElementsByTagName('head')[0];
        const style = document.createElement('style');

        style.type = 'text/css';
        style.appendChild(document.createTextNode(getModalPopupStyles(styles)));
        head.appendChild(style)
    }

    /**
     * register emit method
     * @param event
     */
    protected onViewEmit(event: string): void {
        this.dispatcher.dispatch(event);
    }

    public get controller(): ModalPopupController {
        return this._controller;
    }
}
