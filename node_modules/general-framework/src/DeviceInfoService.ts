import {IDeviceInfo} from './interface/IDeviceInfo';
import * as MobileDetect from 'mobile-detect';

export class DeviceInfoService {
    private static mobileDetect: MobileDetect = new MobileDetect(window.navigator.userAgent);
    private static _dpi: string = 'hdpi';
    private static iOS13: string = 'Macintosh';
    private static _isCanvas: boolean;
    private static _deviceInfo: IDeviceInfo;

    /**
     * Inits device info service
     */
    public static init(): void {

    }

    // init dev tools for mobile devices
    public static addMobileDevTools(isShow?: boolean): void {
        if (DeviceInfoService.isDesktop) return;

        if (isShow || process.env.NODE_ENV === "development") {
            const script = document.createElement("script");
            script.src = "//cdn.jsdelivr.net/npm/eruda";
            document.body.appendChild(script);
            script.onload = function() {
                // @ts-ignore
                eruda.init();
            };
        }
    }

    /**
     * Gets whether is landscape
     */
    public static get isLandscape(): boolean {
        return window.matchMedia("(orientation: landscape)").matches;
    }

    /**
     * Gets whether is full screen
     */
    public static get isFullScreen(): boolean {
        return !!document.fullscreenElement || (document.documentElement.clientWidth === innerWidth && document.documentElement.clientHeight === innerHeight);
    }

    /**
     * Gets whether is full screen on landscape orientation
     * checks only the height of device
     */
    public static get isLandscapeFullScreen(): boolean {
        return DeviceInfoService.isLandscape && (!!document.fullscreenElement || (document.documentElement.clientHeight === innerHeight));
    }

    /**
     * Gets whether is IOs
     */
    public static get isIOs(): boolean {
        return this.mobileDetect.os() == 'iOS';
    }

    /**
     * Defines whether is Chrome current browser
     */
    static get isChrome() {
        return this.mobileDetect.userAgent() == 'Chrome';
    }

    /**
     * Gets whether is desktop
     */
    public static get isDesktop(): boolean {
        return !this.isMobile;
    }

    /**
     * Gets whether is tablet
     */
    public static get isTablet(): boolean {
        return !!this.mobileDetect.tablet();
    }

    /**
     * Gets whether is mobile
     */
    public static get isMobile(): boolean {
        let isMobile: boolean = false;
        isMobile = !!this.mobileDetect.mobile();
        if (window.navigator.maxTouchPoints > 1 && this.userAgent.indexOf(this.iOS13) !== -1) {
            isMobile = true;
        }
        return isMobile;
    }

    /**
     * Gets platform
     */
    public static get platform(): string {
        return this.isMobile ? 'mobile' : 'desktop';
    }

    /**
     * Gets dpi
     */
    public static get dpi(): string {
        return this._dpi;
    }

    /**
     * Gets userAgent string data
     */
    public static get userAgent(): string {
        return window.navigator.userAgent;
    }

    /**
     * Recieves array of devices and checks whether it matches current
     */
    public static setDeviceInfo(array: IDeviceInfo[]): void {
        array.find((elem) => {
            if (this.userAgent.indexOf(elem.pattern) !== -1) {
                this._deviceInfo = elem;
                this._isCanvas = !!elem;
            }
        });
    }

    /**
     * Check if browser use webGL and set @param isCanvas:boolean
     */
    public static detectWebGL(): void {
        let canvas = document.createElement("canvas");
        let webGL = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
        if (webGL && webGL instanceof WebGLRenderingContext) {
            this._isCanvas = false;
        } else {
            this._isCanvas = true;
        }
    }

    /**
     * Gets whether its canvas-based
     */
    public static isCanvas(): boolean {
        return this._isCanvas;
    }

    /**
     * Gets device info data
     */
    public static getDeviceInfo(): IDeviceInfo {
        return this._deviceInfo;
    }
}
