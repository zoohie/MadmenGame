import SocketRedis from 'socket-redis/client';
import {GameInfo} from "../GameInfo";

export class Socket {
    protected socket: {
        /* add method/field type as necessary based on "socket-redis/client" lib */
        open: () => void;
        subscribe: (channel: string, start: number, data: any, onmessage: (data: any) => void) => void;
        unsubscribe: (channel: string) => void;
        isOpen: boolean;
        send: (data: any) => void;
        close: () => void;
        onopen: () => void;
        publish: (channel: string, event: string, data: any) => void;
    };
    protected channels: string[];
    protected keepAliveToken: any;
    public onopen: () => void = () => {};

    constructor(socketPath: string, keepAliveInterval?: number) {
        this.socket = new SocketRedis(`${GameInfo.url}${socketPath}`);
        this.channels = [];
        if (keepAliveInterval != null) {
            /* TODO: make "onopen" extendable */
            this.socket.onopen = () => {
                this.sendHeartBeat();
                this.onopen();
            }
            this.keepAliveToken = setInterval(this.sendHeartBeat, keepAliveInterval * 1000);
        }
        this.socket.open();
    }
    /* https://leapgaming.atlassian.net/wiki/spaces/GI/pages/1404960860/Player+sessions+keep+alive+module */
    static createKeepAliveSocketMeta = (platformToken: string) => ({
        channel: 'checkUserAlive',
        event: 'userHeartbeat',
        message: {
            token: platformToken.substr(-16)
        }
    })

    public subscribeChannel = (socketChannel: string, updateFn: Function, index: number | string): void => {
        this.socket.subscribe(socketChannel, null, {startDate: new Date().getTime()}, updateFn.bind(null, index));
        this.channels.push(socketChannel);
        console.log(`channel "${socketChannel}" subscribed`);
    };

    public unsubscribeChannels = () => {
        if (this.channels.length) {
            this.channels.forEach((channel) => this.socket.unsubscribe(channel));
            this.channels = [];
            console.log("channels Unsubscribed");
        }
    };

    public closeSocket = (): void => {
        if (!this.socket) {
            return;
        }
        this.socket.close();
        console.log("main socket closed");
        if (this.keepAliveToken == null) {
            return;
        }
        clearInterval(this.keepAliveToken);
    };

    public unsubscribeCurrentChannel = (channel: string): void => {
        this.socket.unsubscribe(channel);
        console.log(`current ${channel} is stopped`);
    };

    private sendHeartBeat = () => {
        if (this.socket.isOpen) {
            this.socket.send(Socket.createKeepAliveSocketMeta(GameInfo.token));
        }
    }
}
