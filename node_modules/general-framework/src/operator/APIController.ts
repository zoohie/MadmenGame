import {IAPIData, IIncomeDataFormat} from "./IAPIData";
import {APIConstants} from "./APIConstants";

export class APIController {
    /**
     * Current string is need to restrict
     * ability to send same typed message twice
     */
    private static _balanceUpdateType: string;

    private static set balanceUpdateType(value: string) {
        this._balanceUpdateType = value;
    } 

    private static get balanceUpdateType(): string {
        return this._balanceUpdateType;
    }

    /**
     * API data is retrieved 
     * from initial server response
     */
    private static _APIData: IAPIData;

    public static set APIData(data: IAPIData) {
        this._APIData = data;
    } 

    public static get APIData(): IAPIData {
        return this._APIData;
    }

    /**
     * This method is fired each time when player's balance changes ingame,
     * before spin and after spin ends while balance being updated.
     */
    public static postMessage(message: string, type: string): void {
        if( !this._APIData || process.env.NODE_ENV !== "production" ) {
            return; 
        }

        if( this.balanceUpdateType && this.balanceUpdateType === type ) {
            return;
        }

        if( message && this._APIData.origin && window.parent ) {
            window.parent.postMessage(message, this._APIData.origin);

            this.balanceUpdateType = type;
        }
    }

    /** 
     * This method is needed for freeSpins case (for now), 
     * so the latest update data can be sent to origin.
    */
    public static resetBalanceUpdateType(value: string): void {
        this.balanceUpdateType = value;
    }

    /** 
     * This method listens to 'message' event that is fired
     * from operator and does some local stuff.
    */
    public static subscribeToAPIEvents(): void {
        if( !this._APIData || process.env.NODE_ENV !== "production" ) {
            return; 
        }

        window.addEventListener("message", (event) => {
            if( !event.data || !(event.data as IIncomeDataFormat) ) {
                return;
            }

            if( event.data.name === this._APIData.stopAutoSpins.value ) {
                window.dispatchEvent(new Event(APIConstants.stopAutoSpins));
            }
        });
    }
}
