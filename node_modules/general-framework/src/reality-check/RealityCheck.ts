import {EventDispatcher} from "../EventDispatcher";
import {CoreEvents} from "../CoreEvents";
import {RealityCheckModel} from "./RealityCheckModel";
import {ClockService} from "../clock/ClockService";
import {IRealityCheckParams} from "./IRealityCheckParams";
import {GameInfo} from '../GameInfo';

/**
 * Constructor that init working reality check popup;
 * for viewing it use modal popup (see "modalPopup" module)
 * to start checking init constructor:
 *  -> new RealityCheck();
 *  after it, checking will trigger on some events (see constructor below)
 */

/**
 * @method checkRealityOnInit
 * @method setRealityCheckTimeout
 * @method checkRealityRecursively
 * @method checkOn24HoursExcess
 * @method exitGame
 */
export class RealityCheck {
    // create instance of listener
    private dispatcher = EventDispatcher.getInstance();
    private isFreezeTime: boolean; // if need not count RC time on game freeze
    private startTimeOnUnfreeze: number; // need to count and save the rest time before should to show the RC popup on user refresh the page

    constructor(isFreezeTime?: boolean) {
        this.isFreezeTime = !!isFreezeTime;
        // add listeners to manage reality check popup
        this.dispatcher.addListener(CoreEvents.ON_INIT_RECEIVED, this.checkRealityOnInit, this);
        this.dispatcher.addListener(CoreEvents.SET_REALITY_CHECK_TIMEOUT, this.setRealityCheckTimeout, this);
        this.dispatcher.addListener(CoreEvents.EXIT_GAME_PRESSED, this.exitGame, this);
        this.dispatcher.addListener(CoreEvents.SHOW_BET_HISTORY_PRESSED, () => {
            /*TODO: is viewing of history delays next check reality?*/
            /*if (this.isFreezeTime) {
                RealityCheckModel.isFrozen = false;
                this.dispatcher.dispatch(CoreEvents.CONTINUE_GAME_PRESSED);
            }*/
        });
        this.dispatcher.addListener(CoreEvents.CLOSE_BET_HISTORY, this.checkRealityRecursively, this);
        this.dispatcher.addListener(CoreEvents.CONTINUE_GAME_PRESSED, this.checkRealityRecursively, this);
        this.dispatcher.addListener(CoreEvents.FREEZE_GAME, () => {
            RealityCheckModel.isFrozen = true;
            sessionStorage.setItem('notExpiredLimitTime', '0');
        });

        window.addEventListener("beforeunload", this.saveNotExpiredLimitTime);
    }

    /**
     * This function starts on init event in game.
     * set inner params
     * @param {IRealityCheckParams} params
     */
    private checkRealityOnInit(params: IRealityCheckParams): void {
        RealityCheckModel.time_limit = Math.abs(typeof params.time_limit === 'string' ? parseInt(params.time_limit) : params.time_limit);
        RealityCheckModel.time_elapsed = Math.abs(typeof params.time_elapsed === 'string' ? parseInt(params.time_elapsed) : params.time_elapsed);
        RealityCheckModel.exit_URL = params.exit_URL ? decodeURIComponent(params.exit_URL) : null;
        RealityCheckModel.lobby_URL = params.lobby_URL ? decodeURIComponent(params.lobby_URL) : null;
        RealityCheckModel.history_URL = params.history_URL ? decodeURIComponent(params.history_URL) : null;
        /*  need it till Incorrect link for Home button on mobile fixed on admin panel side
        RealityCheckModel.exit_URL = params.exit_URL ? decodeURIComponent(params.exit_URL).replace("/\/", '') : null;
        RealityCheckModel.lobby_URL = params.lobby_URL ? decodeURIComponent(params.lobby_URL).replace("/\/", '') : null;*/
        RealityCheckModel.lang = params.lang || GameInfo.lang;
        RealityCheckModel.rcInfoUrl = params.rcInfoUrl;

        RealityCheckModel.startTime = +sessionStorage.getItem('startTimeRC') || Date.now();
        sessionStorage.setItem('startTimeRC', RealityCheckModel.startTime.toString());
    }

    /**
     * Starts regular check reality
     * Checking for:
     *  time limit is exists; otherwise - don't show popup,
     *  time elapsed more than time limit -> show reality check popup immediately
     */
    private setRealityCheckTimeout(): void {
        // If time limit is 0 or null never show reality check popup
        if (!RealityCheckModel.time_limit) return;

        if (RealityCheckModel.time_elapsed >= RealityCheckModel.time_limit) {
            this.dispatcher.dispatch(CoreEvents.FREEZE_GAME);
        } else {
            this.startTimeOnUnfreeze = Date.now();
            const notExpiredTime = +sessionStorage.getItem('notExpiredLimitTime');
            const interval = RealityCheckModel.time_limit - RealityCheckModel.time_elapsed - notExpiredTime;

            ClockService.alertTimeOut({
                interval: interval >=0 ? interval : 0,
                event: CoreEvents.FREEZE_GAME
            })
        }
    }

    /**
     * Starts the timer after which launch event of freeze game
     */
    private checkRealityRecursively(): void {
        if (RealityCheckModel.isFrozen || this.checkOn24HoursExcess()) {
            this.dispatcher.dispatch(CoreEvents.FREEZE_GAME);
        } else {
            // RealityCheckModel.isFrozen = false;
            this.startTimeOnUnfreeze = Date.now();

            this.dispatcher.dispatch(CoreEvents.UNFREEZE_GAME);
            ClockService.alertTimeOut({interval: RealityCheckModel.time_limit, event: CoreEvents.FREEZE_GAME})
        }
    }

    /**
     * Checks if user plays over 24 hours
     * @returns {boolean}
     */
    private checkOn24HoursExcess(): boolean {
        const isExcess = (Date.now() - RealityCheckModel.startTime) / (24 * 60 * 60 * 1000) >= 24;
        if (isExcess) this.dispatcher.dispatch(CoreEvents.PLAYING_OVER_24_HOURS);// TODO: remove if redundant (see also CoreEvents.ts)
        return isExcess
    }

    /**
     * Change location with lobby url or url of responsible gambling page.
     * Update the operator that the user has selected an option in the reality check
     */
    private exitGame(): void {
        // !Maybe solution for AppLogger or similar
        setTimeout(() => {
            window.top.location.href = RealityCheckModel.exit_URL || RealityCheckModel.lobby_URL;
        });
    }

    private saveNotExpiredLimitTime = (): void => {
        sessionStorage.setItem(
            'notExpiredLimitTime',
            (RealityCheckModel.isFrozen
                ? 0
                : Math.round((Date.now() - this.startTimeOnUnfreeze) / 1000) + (+sessionStorage.getItem('notExpiredLimitTime'))).toString()
        );
    }
}

/*TODO:
*  stop check reality if session expired or log out --- ???
*  time limit > 24h - who is doing it?
* */
