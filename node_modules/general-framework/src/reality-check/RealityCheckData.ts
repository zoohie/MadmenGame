import {CoreEvents} from "../CoreEvents";
import {EventDispatcher} from "../EventDispatcher";
import {RealityCheckModel} from "./RealityCheckModel";
import {ModalPopupEvents} from "../modalPopup/events/ModalPopupEvents";
import {ModalPopupVO} from "../modalPopup/interfaces/ModalPopupVO";
import {LocalUtil} from "../localization/LocalUtil";
import {ModalPopupConstants} from "../modalPopup/constants/ModalPopupConstants";
import {AppLogger} from "../logger/AppLogger";
import {IRealityCheckBetWinData} from "./IRealityCheckBetWinData";

/**
 * prepare and return data for reality check popup
 * @method getTimeDiff
 * @method getData
 */
export class RealityCheckData {
    public static readonly HISTORY: string = 'history';
    public static readonly STOP: string = 'stop';
    public static readonly CONTINUE: string = 'continue';

    private static dispatcher = EventDispatcher.getInstance();
    private static localKeys: {[key: string]: string | string[]}= {
        header: 'rcHeaderMessage',
        body: ['rcBodyMessage1', 'rcBodyMessage2'],
        buttons: ['rcExitBtn', 'rcHistoryBtn', 'rcContinueBtn'],
    };
    private static _game_provider_id: string;

    /**
     * Converts the difference when user started play with current time.
     * Called on every showing popup
     * @returns {string}
     */
    private static getTimeDiff(freezeTime: number = 0): string {
        const diffTime: number = Date.now() - RealityCheckModel.startTime - freezeTime;
        let seconds: number | string = Math.floor((diffTime / 1000) % 60);
        let minutes: number | string = Math.floor((diffTime / (1000 * 60)) % 60);
        let hours: number | string = Math.floor((diffTime / (1000 * 60 * 60)) % 24);

        hours = (hours < 10) ? "0" + hours : hours;
        minutes = (minutes < 10) ? "0" + minutes : minutes;
        seconds = (seconds < 10) ? "0" + seconds : seconds;

        return `${hours}:${minutes}:${seconds}`
    }

    /**
     * Brings standard data for reality check popup
     * Called on every showing popup
     * @returns {{buttons: ({callback: () => void; text: string; class: string} | {callback: () => void; text: string; class: string} | {callback: () => void; text: string; class: string})[]; header: string; body: string[]}}
     */

    // TODO: ?change message if user already played over 24 hours?
    public static async getData(freezeTime?: number): Promise<ModalPopupVO> {
        let body: string[] = [
            LocalUtil.text("Would you like to continue?"),
            `${LocalUtil.text("You have been playing for:")} ${this.getTimeDiff(freezeTime)}`
        ];

        try {
            if( RealityCheckModel.rcInfoUrl ) {
                await this.generateBetWinData().then((response) => {
                    body.push(response);
                });
            }
        } catch (e) {
            console.log(e);
        }

        return {
            header: LocalUtil.text("The time limit"),
            body: body,
            buttons: [
                {
                    class: ModalPopupConstants.DANGER_CLASS,
                    text: LocalUtil.text("EXIT GAME"),
                    callback: () => {
                        this.dispatcher.dispatch(CoreEvents.EXIT_GAME_PRESSED);
                        this.dispatcher.dispatch(ModalPopupEvents.HIDE_MODAL_POPUP);
                        this.game_provider_id && this.sendPostData(this.STOP);
                    }
                },
                {
                    class: ModalPopupConstants.PRIMARY_CLASS,
                    text: LocalUtil.text("history"),
                    callback: () => {
                        this.dispatcher.dispatch(CoreEvents.SHOW_BET_HISTORY_PRESSED);
                        this.dispatcher.dispatch(ModalPopupEvents.HIDE_MODAL_POPUP);
                        this.game_provider_id && this.sendPostData(this.HISTORY);
                    }
                },
                {
                    class: ModalPopupConstants.SUCCESS_CLASS,
                    text: LocalUtil.text("CONTINUE"),
                    callback: () => {
                        RealityCheckModel.isFrozen = false;
                        this.dispatcher.dispatch(CoreEvents.CONTINUE_GAME_PRESSED);
                        this.dispatcher.dispatch(ModalPopupEvents.HIDE_MODAL_POPUP);
                        this.game_provider_id && this.sendPostData(this.CONTINUE);
                    }
                },
            ],
        }
    }

    /**
     * if there is this parameter in skin_params, we send window.postMessage
     */
    static get game_provider_id(): string {
        return this._game_provider_id;
    }

    static set game_provider_id(value: string) {
        this._game_provider_id = value;
    }

    /**
     * the operator needs us to send post message to the casino site
     * for them to handle redirection / page layout change.
     */
    private static sendPostData(actionID: string): void {

        window.postMessage({
            "event": "casino-reality-check",
            "action": actionID,
            "game_provider": this._game_provider_id
        },'*');
        AppLogger.log(`sent window.postMessage, action: ${actionID}`)
    }

    /**
     * Method returns overall bet amount during session
     */
    private static async generateBetWinData(): Promise<string> {
        return await fetch(RealityCheckModel.rcInfoUrl).then(async(response) => {
            if( response.ok ) {
                let json: IRealityCheckBetWinData = await response.json();

                return `${LocalUtil.text("During this time you have bet:")} ${json.currencySymbol + json.totalBet} ${LocalUtil.text("and won")} ${json.currencySymbol + json.totalWin}`;
            }
        });
    }
}
