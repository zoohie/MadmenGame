import {LoaderConstants} from "../constants/LoaderConstants";
import {ISoundsGroup} from "../interface/ISoundsLoader";
import {LoaderModel} from "../model/LoaderModel";
import {AppLogger} from "../../logger/AppLogger";
import {LoadEvents} from "../events/LoadEvents";
import {EventDispatcher} from "../../EventDispatcher";
import {ILazySoundGroup} from "../interface/ILazySoundGroup";

export class SoundLoader {
    protected mainInitialResolve: Function;
    protected lazyQueue: ILazySoundGroup[] = [];
    protected mainLazyResolve: Function;
    protected currentLazyGroup: ILazySoundGroup;
    protected forceGroupId: string;
    protected currentPriorityID: string;
    protected dispatcher: EventDispatcher = EventDispatcher.getInstance();

    public load(priority: string): Promise<any> {

        return new Promise<any>((loadComplete) => {
            switch (priority) {
                case LoaderConstants.GENERAL_PRIORITY:
                    this.currentPriorityID = LoaderConstants.GENERAL_PRIORITY;
                    if (!LoaderModel.generalSoundsToLoad || LoaderModel.generalSoundsToLoad.length <= 0) {
                        loadComplete();
                        return;
                    }
                    return Promise.all([
                        this.loadQueue(LoaderModel.generalSoundsToLoad)
                    ]).then(() => {
                        AppLogger.log("ALL " + LoaderConstants.GENERAL_PRIORITY + " sounds loaded!");
                        loadComplete();
                    });
                    break;
                case LoaderConstants.PRELOAD_PRIORITY:
                    this.currentPriorityID = LoaderConstants.PRELOAD_PRIORITY;
                    if (LoaderModel.preloadSoundsToLoad.length <= 0) {
                        loadComplete();
                        return;
                    }
                    return Promise.all([
                        this.loadQueue(LoaderModel.preloadSoundsToLoad)
                    ]).then(() => {
                        AppLogger.log("ALL " + LoaderConstants.PRELOAD_PRIORITY + " sounds loaded!");
                        loadComplete();
                    });
                    break;
                case LoaderConstants.INITIAL_PRIORITY:
                    this.currentPriorityID = LoaderConstants.INITIAL_PRIORITY;
                    if (LoaderModel.initialSoundsToLoad.length <= 0) {
                        loadComplete();
                        return;
                    }
                    return Promise.all([
                        this.loadQueue(LoaderModel.initialSoundsToLoad)
                    ]).then(() => {
                        AppLogger.log("ALL " + LoaderConstants.INITIAL_PRIORITY + " sounds loaded!");
                        loadComplete();
                    });
                    break;
                case LoaderConstants.LAZY_PRIORITY:
                    this.currentPriorityID = LoaderConstants.LAZY_PRIORITY;
                    if (LoaderModel.lazySoundsToLoad.length <= 0) {
                        loadComplete();
                        return;
                    }
                    return Promise.all([
                        this.loadLazyQueue(LoaderModel.lazySoundsToLoad)
                    ]).then(() => {
                        AppLogger.log("ALL " + LoaderConstants.LAZY_PRIORITY + " sounds loaded!");
                        loadComplete();
                    });
                    break;
            }
        })
    }

    public forceLoad(groupId: string): void {
        if (LoaderModel.lazySoundsToLoad.length <= 0) {
            return;
        }
        if (LoaderModel.isGroupLoaded(groupId) || this.currentLazyGroup.id === this.forceGroupId) {
            return;
        }
        this.forceGroupId = groupId;

    }

    protected loadLazyQueue(soundsData: ISoundsGroup[]): Promise<any> {
        return new Promise<any>((resolve) => {
            this.mainLazyResolve = resolve;
            const groupsId: string[] = [];
            this.lazyQueue = [];
            soundsData.forEach((sound) => {
                sound.group.forEach((groupName) => {
                    if (groupsId.indexOf(groupName) === -1) {
                        groupsId.push(groupName);
                    }
                })
            });
            groupsId.forEach((groupId: string) => {
                this.lazyQueue.push(
                    {
                        id: groupId,
                        assets: soundsData.filter((sound) => {
                            return sound.group.indexOf(groupId) !== -1;
                        })
                    }
                );
            });
            this.loadLazyGroup();
        })
    }

    protected loadLazyGroup(): void {
        if (this.lazyQueue.length > 0) {
            this.currentLazyGroup = this.lazyQueue.shift();
            LoaderModel.totalLazyGroupSize += this.currentLazyGroup.assets.length;
            this.loadLazySounds(this.currentLazyGroup.assets.pop());
        } else {
            this.mainLazyResolve();
        }
    }

    protected loadLazySounds(group: ISoundsGroup): void {
        /**
         * concrete loader depends on sound library
         */
    }

    protected checkNextLazyAsset(): void {
        if (this.forceGroupId) {
            let index: number = this.lazyQueue.findIndex((item) => {
                return item.id === this.forceGroupId;
            })
            if (this.currentLazyGroup.assets.length > 0) {
                this.lazyQueue.unshift(this.currentLazyGroup);
                index++;
            } else {
                this.onLazyGroupEnd();
            }

            this.currentLazyGroup = this.lazyQueue.splice(index, 1)[0];
            this.forceGroupId = null;
            this.loadLazySounds(this.currentLazyGroup.assets.pop());
        } else {
            if (this.currentLazyGroup.assets.length > 0) {
                this.loadLazySounds(this.currentLazyGroup.assets.pop());
            } else {
                this.onLazyGroupEnd();
                this.loadLazyGroup();
            }
        }
    }

    protected onLazyGroupEnd(): void {
        AppLogger.log(`assets group is loaded: ${this.currentLazyGroup.id}`);
        this.dispatcher.dispatch(LoadEvents.SOUND_LOADED, this.currentLazyGroup.id);
        LoaderModel.addSoundLoadedGroup(this.currentLazyGroup.id);
        LoaderModel.addLoadedGroup(this.currentLazyGroup.id);
    }

    protected loadQueue(soundsData: ISoundsGroup[]): Promise<any> {
        return new Promise<any>((resolve) => {
            this.mainInitialResolve = resolve;

            /**
             * concrete loader depends on sound library
             */

        });
    }

}
