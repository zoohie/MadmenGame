import {IAssetsToLoad} from "../interface/IAssetsToLoad";
import {IAssetsGroup} from "../interface/IAssetsGroup";
import {ISoundsGroup, ISoundsLoader} from "../interface/ISoundsLoader";
import {IBitmapFontGroup, IBitmapFontsLoader} from "../interface/IBitmapFontsLoader";
import {LoaderConstants} from "../constants/LoaderConstants";
import {ISpineLoader} from "../interface/ISpineLoader";

export class LoaderModel {


    protected static _initialAssetToLoad: IAssetsGroup[] = [];
    protected static _preloadAssetToLoad: IAssetsGroup[] = [];
    protected static _generalAssetToLoad: IAssetsGroup[] = [];
    protected static _lazyAssetToLoad: IAssetsGroup[] = [];

    protected static _initialSoundsToLoad: ISoundsGroup[] = [];
    protected static _preloadSoundsToLoad: ISoundsGroup[] = [];
    protected static _generalSoundsToLoad: ISoundsGroup[] = [];
    protected static _lazySoundsToLoad: ISoundsGroup[] = [];

    protected static _initialBitmapFontsToLoad: IBitmapFontGroup[] = [];
    protected static _preloadBitmapFontsToLoad: IBitmapFontGroup[] = [];
    protected static _lazyBitmapFontsToLoad: IBitmapFontGroup[] = [];

    protected static _loadedGroups: string[] = [];
    protected static _soundLoadedGroups: string[] = [];
    protected static _bitmapFontsLoadedGroups: string[] = [];
    protected static _assetsLoadedGroups: string[] = [];

    protected static _spineSkeletons: string[] = [];
    protected static _i18nPaths: string;
    private static _i18nLastUpdate: string;
    private static _spinePaths: string;
    private static _spineDataToLoad: ISpineLoader[] = [];

    protected static _totalLazyGroupSize: number = 0;

    //SPINE
    /**
     * set and get total number for loading all spine data
     */
    public static get spineDataToLoad(): ISpineLoader[] {
        return this._spineDataToLoad;
    }

    public static set spineDataToLoad(value: ISpineLoader[]) {
        this._spineDataToLoad = value;
    }


    //BITMAP_FONTS
    /**
     * set data for loading all initial bitmap fonts
     * @param data
     */
    public static initialBitmapFonts(data: IBitmapFontsLoader): void {
        this._initialBitmapFontsToLoad = data.groups.initial;
    }

    /**
     * set data for loading all preload bitmap fonts
     * @param data
     */
    public static preloadBitmapFonts(data: IBitmapFontsLoader): void {
        this._preloadBitmapFontsToLoad = data.groups.preload;
    }

    /**
     * set data for loading all lazy bitmap fonts
     * @param data
     */
    public static lazyBitmapFonts(data: IBitmapFontsLoader): void {
        this._lazyBitmapFontsToLoad = data.groups.lazy;
    }

    //ASSETS
    /**
     * set data for loading all initial assets (atlases)
     * @param data
     */
    public static initialAssets(data: IAssetsToLoad): void {
        this._initialAssetToLoad = data.groups.initial;
    }

    /**
     * set data for loading all general assets (atlases)
     * @param data
     */
    public static generalAssets(data: IAssetsToLoad): void {
        this._generalAssetToLoad = data.groups.general;
    }

    /**
     * set data for loading all preload assets (atlases)
     * @param data
     */
    public static preloadAssets(data: IAssetsToLoad): void {
        this._preloadAssetToLoad = data.groups.preload;
    }

    /**
     * set data for loading all lazy assets (atlases)
     * @param data
     */
    public static lazyAssets(data: IAssetsToLoad): void {
        this._lazyAssetToLoad = data.groups.lazy;
    }

    //SOUNDS
    /**
     * set data for loading all initial sounds
     * @param data
     */
    public static initialSounds(data: ISoundsLoader) {
        this._initialSoundsToLoad = data.groups.initial;
    }

    /**
     * set data for loading all general sounds
     * @param data
     */
    public static generalSounds(data: ISoundsLoader) {
        this._generalSoundsToLoad = data.groups.general;
    }

    /**
     * set data for loading all preload sounds
     * @param data
     */
    public static preloadSounds(data: ISoundsLoader) {
        this._preloadSoundsToLoad = data.groups.preload;
    }

    /**
     * set data for loading all lazy sounds
     * @param data
     */
    public static lazySounds(data: ISoundsLoader) {
        this._lazySoundsToLoad = data.groups.lazy;
    }

    /**
     * check if all resources of needed lazy group are loaded
     * @param groupId
     */
    public static isGroupLoaded(groupId: string): boolean {
        return this._loadedGroups.indexOf(groupId) !== -1;
    }

    /**
     * add lazy loading group data
     * @param groupId
     */
    public static addLoadedGroup(groupId: string): void {
        if (this.isAssetsLoaded(groupId) && this.isBitmapFontsLoaded(groupId) && this.isSoundsLoaded(groupId)) {
            this.totalLazyGroupSize = 0;
            this._loadedGroups.push(groupId);
        }
    }

    /**
     * add Sound lazy loading group data
     * @param groupId
     */
    public static addSoundLoadedGroup(groupId: string) {
        this._soundLoadedGroups.push(groupId);
    }

    /**
     * add Assets lazy loading group data
     * @param groupId
     */
    public static addAssetsLoadedGroup(groupId: string) {
        this._assetsLoadedGroups.push(groupId);
    }

    /**
     * add BitmapFonts lazy loading group data
     * @param groupId
     */
    public static addBitmapFontsLoadedGroup(groupId: string) {
        this._bitmapFontsLoadedGroups.push(groupId);
    }


    /**
     * check if all sounds of needed lazy group is loaded
     * @param groupId
     */
    public static isSoundsLoaded(groupId): boolean {
        if (!this._lazySoundsToLoad.find((elem) => {
            return elem.group.indexOf(groupId) !== -1;
        })) {
            return true;
        }
        return this._soundLoadedGroups.indexOf(groupId) !== -1;
    }

    /**
     * check if all assets (atlases) of needed lazy group is loaded
     * @param groupId
     */
    public static isAssetsLoaded(groupId): boolean {
        if (!this._lazyAssetToLoad.find((elem) => {
            return elem.group.indexOf(groupId) !== -1;
        })) {
            return true;
        }
        return this._assetsLoadedGroups.indexOf(groupId) !== -1;
    }

    /**
     * check if all bitmap fonts  of needed lazy group is loaded
     * @param groupId
     */
    public static isBitmapFontsLoaded(groupId): boolean {
        if (!this._lazyBitmapFontsToLoad.find((elem) => {
            return elem.group.indexOf(groupId) !== -1;
        })) {
            return true;
        }
        return this._bitmapFontsLoadedGroups.indexOf(groupId) !== -1;
    }

    /**
     * return resources size by its loading priority
     * @param currentPriorityID
     */
    public static currentGroupSize(currentPriorityID: string): number {
        switch (currentPriorityID) {
            case LoaderConstants.PRELOAD_PRIORITY:
                return this.totalPreloadGroupSize;
                break;
            case LoaderConstants.INITIAL_PRIORITY:
                return this.totalInitialGroupSize;
                break;
            case LoaderConstants.LAZY_PRIORITY:
                return this.totalLazyGroupSize;
                break;
            case LoaderConstants.GENERAL_PRIORITY:
                return this.totalGeneralGroupSize;
                break;

        }
    }

    /**
     *  Setters && Getters
     */

    public static get totalGeneralGroupSize(): number {
        let size: number = 0;
        if (this._generalAssetToLoad) {
            size += this._generalAssetToLoad.length*2;
        }
        if (this._generalSoundsToLoad) {
            size += this._generalSoundsToLoad.length;
        }
        if (this._spineDataToLoad) {
            size += this._spineDataToLoad.length;
        }
        return size;
    }

    public static get totalPreloadGroupSize(): number {
        let size: number = 0;
        if (this._preloadBitmapFontsToLoad) {
            size += this._preloadBitmapFontsToLoad.length;
        }
        if (this._preloadAssetToLoad) {
            size += this._preloadAssetToLoad.length;
        }
        if (this._preloadSoundsToLoad) {
            size += this._preloadSoundsToLoad.length;
        }
        return size;
    }

    public static get totalInitialGroupSize(): number {
        let size: number = 0;
        if (this._initialAssetToLoad) {
            size += this._initialAssetToLoad.length;
        }
        if (this._initialBitmapFontsToLoad) {
            size += this._initialBitmapFontsToLoad.length;
        }
        if (this._initialSoundsToLoad) {
            size += this._initialSoundsToLoad.length;
        }
        return size;
    }

    public static get totalLazyGroupSize(): number {
        return this._totalLazyGroupSize;
    }

    public static set totalLazyGroupSize(value: number) {
        this._totalLazyGroupSize = value;
    }

    public static get generalSoundsToLoad(): ISoundsGroup[] {
        return this._generalSoundsToLoad;
    }

    public static get preloadSoundsToLoad(): ISoundsGroup[] {
        return this._preloadSoundsToLoad;
    }

    public static get lazySoundsToLoad(): ISoundsGroup[] {
        return this._lazySoundsToLoad;
    }

    public static get initialSoundsToLoad(): ISoundsGroup[] {
        return this._initialSoundsToLoad;
    }

    public static get lazyAssetToLoad(): IAssetsGroup[] {
        return this._lazyAssetToLoad;
    }

    public static get generalAssetToLoad(): IAssetsGroup[] {
        return this._generalAssetToLoad;
    }

    public static get preloadAssetToLoad(): IAssetsGroup[] {
        return this._preloadAssetToLoad;
    }

    public static get initialAssetToLoad(): IAssetsGroup[] {
        return this._initialAssetToLoad;
    }

    public static get lazyBitmapFontsToLoad(): IBitmapFontGroup[] {
        return this._lazyBitmapFontsToLoad;
    }

    public static get preloadBitmapFontsToLoad(): IBitmapFontGroup[] {
        return this._preloadBitmapFontsToLoad;
    }

    public static get initialBitmapFontsToLoad(): IBitmapFontGroup[] {
        return this._initialBitmapFontsToLoad;
    }

    public static get spineSkeletons(): string[] {
        return this._spineSkeletons;
    }

    public static set spineSkeletons(value: string[]) {
        this._spineSkeletons = value;
    }

    static get i18nPaths(): string {
        return this._i18nPaths;
    }

    static set i18nPaths(value: string) {
        this._i18nPaths = value;
    }

    static get spinePaths(): string {
        return this._spinePaths;
    }

    static set spinePaths(value: string) {
        this._spinePaths = value;
    }

    /**
     *  Get last update of localization config file
     */
    static get i18nLastUpdate(): string {
        return this._i18nLastUpdate;
    }

    /**
     *  Set last update of localization config file
     */
    static set i18nLastUpdate(value: string) {
        this._i18nLastUpdate = value;
    }
}
