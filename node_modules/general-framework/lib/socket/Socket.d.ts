export declare class Socket {
    protected socket: {
        open: () => void;
        subscribe: (channel: string, start: number, data: any, onmessage: (data: any) => void) => void;
        unsubscribe: (channel: string) => void;
        isOpen: boolean;
        send: (data: any) => void;
        close: () => void;
        onopen: () => void;
        publish: (channel: string, event: string, data: any) => void;
    };
    protected channels: string[];
    protected keepAliveToken: any;
    onopen: () => void;
    constructor(socketPath: string, keepAliveInterval?: number);
    static createKeepAliveSocketMeta: (platformToken: string) => {
        channel: string;
        event: string;
        message: {
            token: string;
        };
    };
    subscribeChannel: (socketChannel: string, updateFn: Function, index: string | number) => void;
    unsubscribeChannels: () => void;
    closeSocket: () => void;
    unsubscribeCurrentChannel: (channel: string) => void;
    private sendHeartBeat;
}
