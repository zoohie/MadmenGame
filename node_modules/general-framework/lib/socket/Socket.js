import SocketRedis from 'socket-redis/client';
import { GameInfo } from "../GameInfo";
export class Socket {
    constructor(socketPath, keepAliveInterval) {
        this.onopen = () => { };
        this.subscribeChannel = (socketChannel, updateFn, index) => {
            this.socket.subscribe(socketChannel, null, { startDate: new Date().getTime() }, updateFn.bind(null, index));
            this.channels.push(socketChannel);
            console.log(`channel "${socketChannel}" subscribed`);
        };
        this.unsubscribeChannels = () => {
            if (this.channels.length) {
                this.channels.forEach((channel) => this.socket.unsubscribe(channel));
                this.channels = [];
                console.log("channels Unsubscribed");
            }
        };
        this.closeSocket = () => {
            if (!this.socket) {
                return;
            }
            this.socket.close();
            console.log("main socket closed");
            if (this.keepAliveToken == null) {
                return;
            }
            clearInterval(this.keepAliveToken);
        };
        this.unsubscribeCurrentChannel = (channel) => {
            this.socket.unsubscribe(channel);
            console.log(`current ${channel} is stopped`);
        };
        this.sendHeartBeat = () => {
            if (this.socket.isOpen) {
                this.socket.send(Socket.createKeepAliveSocketMeta(GameInfo.token));
            }
        };
        this.socket = new SocketRedis(`${GameInfo.url}${socketPath}`);
        this.channels = [];
        if (keepAliveInterval != null) {
            /* TODO: make "onopen" extendable */
            this.socket.onopen = () => {
                this.sendHeartBeat();
                this.onopen();
            };
            this.keepAliveToken = setInterval(this.sendHeartBeat, keepAliveInterval * 1000);
        }
        this.socket.open();
    }
}
/* https://leapgaming.atlassian.net/wiki/spaces/GI/pages/1404960860/Player+sessions+keep+alive+module */
Socket.createKeepAliveSocketMeta = (platformToken) => ({
    channel: 'checkUserAlive',
    event: 'userHeartbeat',
    message: {
        token: platformToken.substr(-16)
    }
});
//# sourceMappingURL=Socket.js.map