import * as MobileDetect from 'mobile-detect';
export class DeviceInfoService {
    /**
     * Inits device info service
     */
    static init() {
    }
    // init dev tools for mobile devices
    static addMobileDevTools(isShow) {
        if (DeviceInfoService.isDesktop)
            return;
        if (isShow || process.env.NODE_ENV === "development") {
            const script = document.createElement("script");
            script.src = "//cdn.jsdelivr.net/npm/eruda";
            document.body.appendChild(script);
            script.onload = function () {
                // @ts-ignore
                eruda.init();
            };
        }
    }
    /**
     * Gets whether is landscape
     */
    static get isLandscape() {
        return window.matchMedia("(orientation: landscape)").matches;
    }
    /**
     * Gets whether is full screen
     */
    static get isFullScreen() {
        return !!document.fullscreenElement || (document.documentElement.clientWidth === innerWidth && document.documentElement.clientHeight === innerHeight);
    }
    /**
     * Gets whether is full screen on landscape orientation
     * checks only the height of device
     */
    static get isLandscapeFullScreen() {
        return DeviceInfoService.isLandscape && (!!document.fullscreenElement || (document.documentElement.clientHeight === innerHeight));
    }
    /**
     * Gets whether is IOs
     */
    static get isIOs() {
        return this.mobileDetect.os() == 'iOS';
    }
    /**
     * Defines whether is Chrome current browser
     */
    static get isChrome() {
        return this.mobileDetect.userAgent() == 'Chrome';
    }
    /**
     * Gets whether is desktop
     */
    static get isDesktop() {
        return !this.isMobile;
    }
    /**
     * Gets whether is tablet
     */
    static get isTablet() {
        return !!this.mobileDetect.tablet();
    }
    /**
     * Gets whether is mobile
     */
    static get isMobile() {
        let isMobile = false;
        isMobile = !!this.mobileDetect.mobile();
        if (window.navigator.maxTouchPoints > 1 && this.userAgent.indexOf(this.iOS13) !== -1) {
            isMobile = true;
        }
        return isMobile;
    }
    /**
     * Gets platform
     */
    static get platform() {
        return this.isMobile ? 'mobile' : 'desktop';
    }
    /**
     * Gets dpi
     */
    static get dpi() {
        return this._dpi;
    }
    /**
     * Gets userAgent string data
     */
    static get userAgent() {
        return window.navigator.userAgent;
    }
    /**
     * Recieves array of devices and checks whether it matches current
     */
    static setDeviceInfo(array) {
        array.find((elem) => {
            if (this.userAgent.indexOf(elem.pattern) !== -1) {
                this._deviceInfo = elem;
                this._isCanvas = !!elem;
            }
        });
    }
    /**
     * Check if browser use webGL and set @param isCanvas:boolean
     */
    static detectWebGL() {
        let canvas = document.createElement("canvas");
        let webGL = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
        if (webGL && webGL instanceof WebGLRenderingContext) {
            this._isCanvas = false;
        }
        else {
            this._isCanvas = true;
        }
    }
    /**
     * Gets whether its canvas-based
     */
    static isCanvas() {
        return this._isCanvas;
    }
    /**
     * Gets device info data
     */
    static getDeviceInfo() {
        return this._deviceInfo;
    }
}
DeviceInfoService.mobileDetect = new MobileDetect(window.navigator.userAgent);
DeviceInfoService._dpi = 'hdpi';
DeviceInfoService.iOS13 = 'Macintosh';
//# sourceMappingURL=DeviceInfoService.js.map