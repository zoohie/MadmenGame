import { URLParams } from './URLParams';
import { EventDispatcher } from "./EventDispatcher";
import { CoreEvents } from "./CoreEvents";
export class GameInfo {
    /**
     * Inits game information storage
     * Sets values from get params
     * Fetches token and notifies upon resolving
     */
    static init(title) {
        this._title = title;
        const origin = window.location.origin;
        this._url = /localhost/.test(origin) || /\d+\.\d+\.\d+\.\d+/.test(origin) ? URLParams.getParam("url") : origin;
        if (process.env.NODE_ENV === 'production') {
            this.hideToken(this.tokenParamKey);
        }
        this._currency = URLParams.getParam("platform_currency") || 'EUR';
        this._lang = (URLParams.getParam("lang") || this._defaultLang).toLowerCase();
        // need for checking game in several tabs
        this.dispatcher.dispatch(CoreEvents.GAME_INFO_INITIALIZED);
    }
    static hideToken(tokenParamKey) {
        const url = new URL(document.URL);
        const urlParams = new URLSearchParams(url.search);
        urlParams.delete(tokenParamKey);
        window.history.replaceState({ token: this.token }, '', `${url.origin}${url.pathname}?${urlParams.toString()}`);
    }
    static get currency() {
        return this._currency;
    }
    static set currency(value) {
        this._currency = value;
    }
    static get lang() {
        return this._lang;
    }
    static set lang(value) {
        this._lang = value;
    }
    static get defaultLang() {
        return this._defaultLang;
    }
    static get title() {
        return this._title;
    }
    static get url() {
        return this._url;
    }
    static get token() {
        return URLParams.getParam(this.tokenParamKey) || (window.history.state || {}).token;
    }
}
GameInfo._defaultLang = 'en';
GameInfo.dispatcher = EventDispatcher.getInstance();
GameInfo.tokenParamKey = 'platform_token';
//# sourceMappingURL=GameInfo.js.map