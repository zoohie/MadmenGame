import { GameInfo } from '../GameInfo';
export class MoneyFormatter {
    /**
     * format money value
     * @param value - money value as number
     * @param showCurrency - true as default
     * @param minInteger - minimum integer number, where digits after dot will not show
     * return string 2500 => $2,500.00
     */
    static format(value, showCurrency = true, minInteger = 0) {
        if (minInteger > 0) {
            this.defaultMinInteger = minInteger;
        }
        let result;
        let isInteger = Number.isInteger(value);
        if (value >= this.defaultMinInteger && isInteger) {
            result = this.showCurrency(showCurrency, value);
            return result;
        }
        result = this.showCurrency(showCurrency, value);
        result = this.checkPrecision(result);
        return result;
    }
    /**
     * check if currency should be shown
     */
    static showCurrency(showCurrency, value) {
        if (showCurrency) {
            return this.checkCurrency(value);
        }
        return value.toLocaleString('en-US');
    }
    /**
     * set precision - numbers of digits after dot
     * @param value
     */
    static setPrecision(value) {
        this.precision = value;
    }
    /**
     * set sign for currency
     * @param value
     */
    static setCurrencySign(value) {
        this.currencySign = value;
    }
    static checkPrecision(value) {
        if (this.precision) {
            let currency = "";
            if (value.includes(this.currencySign)) {
                currency = this.currencySign;
                value = value.replace(this.currencySign, "");
            }
            if (value.split(".").length === 1) {
                const additionalZeros = "0".repeat(this.precision);
                value = value.concat("." + additionalZeros);
            }
            else {
                const arr = value.split(".");
                if (arr[1].length >= this.precision) {
                    let substringResult = arr[1].substring(0, this.precision);
                    arr[1] = substringResult;
                }
                else {
                    const additionalZerosNumber = this.precision - arr[1].length;
                    const additionalZeros = "0".repeat(additionalZerosNumber);
                    let concatResult = arr[1].concat(additionalZeros);
                    arr[1] = concatResult;
                }
                if (arr[1].length > 0) {
                    value = arr.join(".");
                }
                else {
                    value = arr[0];
                }
            }
            value = currency + value;
        }
        return value;
    }
    static checkCurrency(value) {
        let result;
        if (this.currencySign) {
            result = value.toLocaleString('en-US');
            const letterRegExp = /^[a-zA-Z]+$/;
            let space;
            if (letterRegExp.test(this.currencySign)) {
                space = " ";
            }
            else {
                space = "";
            }
            result = this.currencySign + space + result;
        }
        else {
            result = value.toLocaleString('en-US', {
                style: 'currency',
                currency: GameInfo.currency,
            });
        }
        return result;
    }
}
MoneyFormatter.defaultMinInteger = 100;
//# sourceMappingURL=MoneyFormatter.js.map