import { ClockEvents } from './ClockEvents';
import { EventDispatcher } from '../EventDispatcher';
export class ClockService {
    /**
     * Starts clock
     * @param [timeDataParams]
     */
    static startClock(timeDataParams) {
        this.onTickUp();
    }
    /**
     * Checking on log status
     * @param {boolean} value
     */
    static isLog(value) {
        this._isLog = value;
    }
    /**
     * Stops clock
     */
    static stopClock() {
        clearTimeout(this.tickUp);
        this.tickUp = null;
    }
    /**
     * Determines whether tick up on
     */
    static onTickUp() {
        clearTimeout(this.tickUp);
        this.tickUp = null;
        const date = new Date();
        const currentTime = date.toLocaleString('en', this.timeDataOptions);
        this.dispatcher.dispatch(ClockEvents.SHOW_TIME, { currentTime }, this._isLog);
        this.tickUp = setTimeout(() => this.onTickUp(), 1000);
    }
    /**
     * @alertTimeOut()
     * This method is used to start any custom timer to dispatch incoming event.
     * @interval - time after timer stop in seconds
     * @event - event name which dispatched after timer stop
     * @repeats - number of cycles to repeat same timer
     * @loop - loop timer till application is open, if timer is loop, repeats are ignored
     */
    static alertTimeOut(params) {
        setTimeout(() => {
            this.dispatcher.dispatch(params.event);
            if (params.loop) {
                this.alertTimeOut(params);
                return;
            }
            if (params.repeats > 0) {
                let currentRepeats = params.repeats - 1;
                params.repeats = currentRepeats;
                this.alertTimeOut(params);
            }
        }, params.interval * 1000);
    }
}
ClockService._isLog = true;
ClockService.dispatcher = EventDispatcher.getInstance();
/**
 * @timeDataOptions
 * This field used to show time only or full date. Should be fill with server side and send with "ClockEvents.START_CLOCK" event.
 * Full option description at "ClockEvents.START_CLOCK" event
 */
ClockService.timeDataOptions = { second: "numeric", hour: "numeric", minute: "numeric" /*, timeZone: "UTC"*/ };
//# sourceMappingURL=ClockService.js.map