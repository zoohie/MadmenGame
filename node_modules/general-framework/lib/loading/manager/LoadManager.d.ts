import { ConfigLoader } from "../loaders/ConfigLoader";
import { AssetsLoader } from "../loaders/AssetsLoader";
import { SoundLoader } from "../loaders/SoundLoader";
import { BitmapFontsLoader } from "../loaders/BitmapFontsLoader";
import { EventDispatcher } from "../../EventDispatcher";
import { IFontVariant } from '../interface/IFontVariant';
export declare class LoadManager {
    protected configLoader: ConfigLoader;
    protected assetsLoader: AssetsLoader;
    protected soundLoader: SoundLoader;
    protected bitmapFontsLoader: BitmapFontsLoader;
    protected dispatcher: EventDispatcher;
    constructor();
    protected addListeners(): void;
    /**
     * load all configs to get all urls for loading
     * @param data
     * - key should be from LoaderConstants
     * each of them represents unique loaders type (for sound, asset, spine, bitmap font, etc)
     * - value is url for config
     */
    protected loadConfigs(data: {
        [key: string]: string;
    }): void;
    /**
     * load assets (atlases) according to its loading priority
     * @param priority
     */
    protected loadAssets(priority: string): void;
    /**
     * load bitmap fonts according to its loading priority
     * @param priority
     */
    protected loadBitmapFonts(priority: string): void;
    protected loadSpineData(priority?: string): void;
    /**
     * Force loading for a concrete lazy loading group.
     *
     * @param group
     */
    protected forceLoad(group: string): void;
    protected forceLoadAssets(groupName: string): Promise<any>;
    protected forceLoadBitmaps(groupName: string): Promise<any>;
    protected forceLoadSounds(groupName: string): Promise<any>;
    protected loadFonts(fonts: {
        [key: string]: IFontVariant[];
    }): void;
    protected loadSounds(priority: string): void;
    protected loadI18N(): void;
}
