import { LoaderConstants } from "../constants/LoaderConstants";
export class LoaderModel {
    //SPINE
    /**
     * set and get total number for loading all spine data
     */
    static get spineDataToLoad() {
        return this._spineDataToLoad;
    }
    static set spineDataToLoad(value) {
        this._spineDataToLoad = value;
    }
    //BITMAP_FONTS
    /**
     * set data for loading all initial bitmap fonts
     * @param data
     */
    static initialBitmapFonts(data) {
        this._initialBitmapFontsToLoad = data.groups.initial;
    }
    /**
     * set data for loading all preload bitmap fonts
     * @param data
     */
    static preloadBitmapFonts(data) {
        this._preloadBitmapFontsToLoad = data.groups.preload;
    }
    /**
     * set data for loading all lazy bitmap fonts
     * @param data
     */
    static lazyBitmapFonts(data) {
        this._lazyBitmapFontsToLoad = data.groups.lazy;
    }
    //ASSETS
    /**
     * set data for loading all initial assets (atlases)
     * @param data
     */
    static initialAssets(data) {
        this._initialAssetToLoad = data.groups.initial;
    }
    /**
     * set data for loading all general assets (atlases)
     * @param data
     */
    static generalAssets(data) {
        this._generalAssetToLoad = data.groups.general;
    }
    /**
     * set data for loading all preload assets (atlases)
     * @param data
     */
    static preloadAssets(data) {
        this._preloadAssetToLoad = data.groups.preload;
    }
    /**
     * set data for loading all lazy assets (atlases)
     * @param data
     */
    static lazyAssets(data) {
        this._lazyAssetToLoad = data.groups.lazy;
    }
    //SOUNDS
    /**
     * set data for loading all initial sounds
     * @param data
     */
    static initialSounds(data) {
        this._initialSoundsToLoad = data.groups.initial;
    }
    /**
     * set data for loading all general sounds
     * @param data
     */
    static generalSounds(data) {
        this._generalSoundsToLoad = data.groups.general;
    }
    /**
     * set data for loading all preload sounds
     * @param data
     */
    static preloadSounds(data) {
        this._preloadSoundsToLoad = data.groups.preload;
    }
    /**
     * set data for loading all lazy sounds
     * @param data
     */
    static lazySounds(data) {
        this._lazySoundsToLoad = data.groups.lazy;
    }
    /**
     * check if all resources of needed lazy group are loaded
     * @param groupId
     */
    static isGroupLoaded(groupId) {
        return this._loadedGroups.indexOf(groupId) !== -1;
    }
    /**
     * add lazy loading group data
     * @param groupId
     */
    static addLoadedGroup(groupId) {
        if (this.isAssetsLoaded(groupId) && this.isBitmapFontsLoaded(groupId) && this.isSoundsLoaded(groupId)) {
            this.totalLazyGroupSize = 0;
            this._loadedGroups.push(groupId);
        }
    }
    /**
     * add Sound lazy loading group data
     * @param groupId
     */
    static addSoundLoadedGroup(groupId) {
        this._soundLoadedGroups.push(groupId);
    }
    /**
     * add Assets lazy loading group data
     * @param groupId
     */
    static addAssetsLoadedGroup(groupId) {
        this._assetsLoadedGroups.push(groupId);
    }
    /**
     * add BitmapFonts lazy loading group data
     * @param groupId
     */
    static addBitmapFontsLoadedGroup(groupId) {
        this._bitmapFontsLoadedGroups.push(groupId);
    }
    /**
     * check if all sounds of needed lazy group is loaded
     * @param groupId
     */
    static isSoundsLoaded(groupId) {
        if (!this._lazySoundsToLoad.find((elem) => {
            return elem.group.indexOf(groupId) !== -1;
        })) {
            return true;
        }
        return this._soundLoadedGroups.indexOf(groupId) !== -1;
    }
    /**
     * check if all assets (atlases) of needed lazy group is loaded
     * @param groupId
     */
    static isAssetsLoaded(groupId) {
        if (!this._lazyAssetToLoad.find((elem) => {
            return elem.group.indexOf(groupId) !== -1;
        })) {
            return true;
        }
        return this._assetsLoadedGroups.indexOf(groupId) !== -1;
    }
    /**
     * check if all bitmap fonts  of needed lazy group is loaded
     * @param groupId
     */
    static isBitmapFontsLoaded(groupId) {
        if (!this._lazyBitmapFontsToLoad.find((elem) => {
            return elem.group.indexOf(groupId) !== -1;
        })) {
            return true;
        }
        return this._bitmapFontsLoadedGroups.indexOf(groupId) !== -1;
    }
    /**
     * return resources size by its loading priority
     * @param currentPriorityID
     */
    static currentGroupSize(currentPriorityID) {
        switch (currentPriorityID) {
            case LoaderConstants.PRELOAD_PRIORITY:
                return this.totalPreloadGroupSize;
                break;
            case LoaderConstants.INITIAL_PRIORITY:
                return this.totalInitialGroupSize;
                break;
            case LoaderConstants.LAZY_PRIORITY:
                return this.totalLazyGroupSize;
                break;
            case LoaderConstants.GENERAL_PRIORITY:
                return this.totalGeneralGroupSize;
                break;
        }
    }
    /**
     *  Setters && Getters
     */
    static get totalGeneralGroupSize() {
        let size = 0;
        if (this._generalAssetToLoad) {
            size += this._generalAssetToLoad.length * 2;
        }
        if (this._generalSoundsToLoad) {
            size += this._generalSoundsToLoad.length;
        }
        if (this._spineDataToLoad) {
            size += this._spineDataToLoad.length;
        }
        return size;
    }
    static get totalPreloadGroupSize() {
        let size = 0;
        if (this._preloadBitmapFontsToLoad) {
            size += this._preloadBitmapFontsToLoad.length;
        }
        if (this._preloadAssetToLoad) {
            size += this._preloadAssetToLoad.length;
        }
        if (this._preloadSoundsToLoad) {
            size += this._preloadSoundsToLoad.length;
        }
        return size;
    }
    static get totalInitialGroupSize() {
        let size = 0;
        if (this._initialAssetToLoad) {
            size += this._initialAssetToLoad.length;
        }
        if (this._initialBitmapFontsToLoad) {
            size += this._initialBitmapFontsToLoad.length;
        }
        if (this._initialSoundsToLoad) {
            size += this._initialSoundsToLoad.length;
        }
        return size;
    }
    static get totalLazyGroupSize() {
        return this._totalLazyGroupSize;
    }
    static set totalLazyGroupSize(value) {
        this._totalLazyGroupSize = value;
    }
    static get generalSoundsToLoad() {
        return this._generalSoundsToLoad;
    }
    static get preloadSoundsToLoad() {
        return this._preloadSoundsToLoad;
    }
    static get lazySoundsToLoad() {
        return this._lazySoundsToLoad;
    }
    static get initialSoundsToLoad() {
        return this._initialSoundsToLoad;
    }
    static get lazyAssetToLoad() {
        return this._lazyAssetToLoad;
    }
    static get generalAssetToLoad() {
        return this._generalAssetToLoad;
    }
    static get preloadAssetToLoad() {
        return this._preloadAssetToLoad;
    }
    static get initialAssetToLoad() {
        return this._initialAssetToLoad;
    }
    static get lazyBitmapFontsToLoad() {
        return this._lazyBitmapFontsToLoad;
    }
    static get preloadBitmapFontsToLoad() {
        return this._preloadBitmapFontsToLoad;
    }
    static get initialBitmapFontsToLoad() {
        return this._initialBitmapFontsToLoad;
    }
    static get spineSkeletons() {
        return this._spineSkeletons;
    }
    static set spineSkeletons(value) {
        this._spineSkeletons = value;
    }
    static get i18nPaths() {
        return this._i18nPaths;
    }
    static set i18nPaths(value) {
        this._i18nPaths = value;
    }
    static get spinePaths() {
        return this._spinePaths;
    }
    static set spinePaths(value) {
        this._spinePaths = value;
    }
    /**
     *  Get last update of localization config file
     */
    static get i18nLastUpdate() {
        return this._i18nLastUpdate;
    }
    /**
     *  Set last update of localization config file
     */
    static set i18nLastUpdate(value) {
        this._i18nLastUpdate = value;
    }
}
LoaderModel._initialAssetToLoad = [];
LoaderModel._preloadAssetToLoad = [];
LoaderModel._generalAssetToLoad = [];
LoaderModel._lazyAssetToLoad = [];
LoaderModel._initialSoundsToLoad = [];
LoaderModel._preloadSoundsToLoad = [];
LoaderModel._generalSoundsToLoad = [];
LoaderModel._lazySoundsToLoad = [];
LoaderModel._initialBitmapFontsToLoad = [];
LoaderModel._preloadBitmapFontsToLoad = [];
LoaderModel._lazyBitmapFontsToLoad = [];
LoaderModel._loadedGroups = [];
LoaderModel._soundLoadedGroups = [];
LoaderModel._bitmapFontsLoadedGroups = [];
LoaderModel._assetsLoadedGroups = [];
LoaderModel._spineSkeletons = [];
LoaderModel._spineDataToLoad = [];
LoaderModel._totalLazyGroupSize = 0;
//# sourceMappingURL=LoaderModel.js.map