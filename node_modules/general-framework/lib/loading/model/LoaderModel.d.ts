import { IAssetsToLoad } from "../interface/IAssetsToLoad";
import { IAssetsGroup } from "../interface/IAssetsGroup";
import { ISoundsGroup, ISoundsLoader } from "../interface/ISoundsLoader";
import { IBitmapFontGroup, IBitmapFontsLoader } from "../interface/IBitmapFontsLoader";
import { ISpineLoader } from "../interface/ISpineLoader";
export declare class LoaderModel {
    protected static _initialAssetToLoad: IAssetsGroup[];
    protected static _preloadAssetToLoad: IAssetsGroup[];
    protected static _generalAssetToLoad: IAssetsGroup[];
    protected static _lazyAssetToLoad: IAssetsGroup[];
    protected static _initialSoundsToLoad: ISoundsGroup[];
    protected static _preloadSoundsToLoad: ISoundsGroup[];
    protected static _generalSoundsToLoad: ISoundsGroup[];
    protected static _lazySoundsToLoad: ISoundsGroup[];
    protected static _initialBitmapFontsToLoad: IBitmapFontGroup[];
    protected static _preloadBitmapFontsToLoad: IBitmapFontGroup[];
    protected static _lazyBitmapFontsToLoad: IBitmapFontGroup[];
    protected static _loadedGroups: string[];
    protected static _soundLoadedGroups: string[];
    protected static _bitmapFontsLoadedGroups: string[];
    protected static _assetsLoadedGroups: string[];
    protected static _spineSkeletons: string[];
    protected static _i18nPaths: string;
    private static _i18nLastUpdate;
    private static _spinePaths;
    private static _spineDataToLoad;
    protected static _totalLazyGroupSize: number;
    /**
     * set and get total number for loading all spine data
     */
    static spineDataToLoad: ISpineLoader[];
    /**
     * set data for loading all initial bitmap fonts
     * @param data
     */
    static initialBitmapFonts(data: IBitmapFontsLoader): void;
    /**
     * set data for loading all preload bitmap fonts
     * @param data
     */
    static preloadBitmapFonts(data: IBitmapFontsLoader): void;
    /**
     * set data for loading all lazy bitmap fonts
     * @param data
     */
    static lazyBitmapFonts(data: IBitmapFontsLoader): void;
    /**
     * set data for loading all initial assets (atlases)
     * @param data
     */
    static initialAssets(data: IAssetsToLoad): void;
    /**
     * set data for loading all general assets (atlases)
     * @param data
     */
    static generalAssets(data: IAssetsToLoad): void;
    /**
     * set data for loading all preload assets (atlases)
     * @param data
     */
    static preloadAssets(data: IAssetsToLoad): void;
    /**
     * set data for loading all lazy assets (atlases)
     * @param data
     */
    static lazyAssets(data: IAssetsToLoad): void;
    /**
     * set data for loading all initial sounds
     * @param data
     */
    static initialSounds(data: ISoundsLoader): void;
    /**
     * set data for loading all general sounds
     * @param data
     */
    static generalSounds(data: ISoundsLoader): void;
    /**
     * set data for loading all preload sounds
     * @param data
     */
    static preloadSounds(data: ISoundsLoader): void;
    /**
     * set data for loading all lazy sounds
     * @param data
     */
    static lazySounds(data: ISoundsLoader): void;
    /**
     * check if all resources of needed lazy group are loaded
     * @param groupId
     */
    static isGroupLoaded(groupId: string): boolean;
    /**
     * add lazy loading group data
     * @param groupId
     */
    static addLoadedGroup(groupId: string): void;
    /**
     * add Sound lazy loading group data
     * @param groupId
     */
    static addSoundLoadedGroup(groupId: string): void;
    /**
     * add Assets lazy loading group data
     * @param groupId
     */
    static addAssetsLoadedGroup(groupId: string): void;
    /**
     * add BitmapFonts lazy loading group data
     * @param groupId
     */
    static addBitmapFontsLoadedGroup(groupId: string): void;
    /**
     * check if all sounds of needed lazy group is loaded
     * @param groupId
     */
    static isSoundsLoaded(groupId: any): boolean;
    /**
     * check if all assets (atlases) of needed lazy group is loaded
     * @param groupId
     */
    static isAssetsLoaded(groupId: any): boolean;
    /**
     * check if all bitmap fonts  of needed lazy group is loaded
     * @param groupId
     */
    static isBitmapFontsLoaded(groupId: any): boolean;
    /**
     * return resources size by its loading priority
     * @param currentPriorityID
     */
    static currentGroupSize(currentPriorityID: string): number;
    /**
     *  Setters && Getters
     */
    static readonly totalGeneralGroupSize: number;
    static readonly totalPreloadGroupSize: number;
    static readonly totalInitialGroupSize: number;
    static totalLazyGroupSize: number;
    static readonly generalSoundsToLoad: ISoundsGroup[];
    static readonly preloadSoundsToLoad: ISoundsGroup[];
    static readonly lazySoundsToLoad: ISoundsGroup[];
    static readonly initialSoundsToLoad: ISoundsGroup[];
    static readonly lazyAssetToLoad: IAssetsGroup[];
    static readonly generalAssetToLoad: IAssetsGroup[];
    static readonly preloadAssetToLoad: IAssetsGroup[];
    static readonly initialAssetToLoad: IAssetsGroup[];
    static readonly lazyBitmapFontsToLoad: IBitmapFontGroup[];
    static readonly preloadBitmapFontsToLoad: IBitmapFontGroup[];
    static readonly initialBitmapFontsToLoad: IBitmapFontGroup[];
    static spineSkeletons: string[];
    static i18nPaths: string;
    static spinePaths: string;
    /**
     *  Get last update of localization config file
     */
    /**
    *  Set last update of localization config file
    */
    static i18nLastUpdate: string;
}
