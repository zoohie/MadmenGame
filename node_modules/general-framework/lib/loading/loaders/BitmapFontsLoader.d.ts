import { IBitmapFontGroup } from "../interface/IBitmapFontsLoader";
import { EventDispatcher } from "../../EventDispatcher";
import { ILazyBitmapFontGroup } from "../interface/ILazyBitmapFontGroup";
export declare class BitmapFontsLoader {
    protected lazyQueue: ILazyBitmapFontGroup[];
    protected initialQueue: IBitmapFontGroup[];
    protected currentLazyGroup: ILazyBitmapFontGroup;
    protected forceGroupId: string;
    protected currentPriorityID: string;
    protected mainLazyResolve: Function;
    protected mainInitialResolve: Function;
    protected dispatcher: EventDispatcher;
    /**
     * start load bitmap fonts by its priority
     * @param priority - one from the list [LoaderConstants.PRELOAD_PRIORITY, LoaderConstants.INITIAL_PRIORITY, LoaderConstants.LAZY_PRIORITY]
     */
    load(priority: string): Promise<any>;
    /**
     *@groupId parameter for force load bitmap fonts group.
     * For example feature assets group need to be load faster then other lazy load groups
     * **/
    forceLoad(groupId: string): void;
    /**
     *preload and initial bitmap fonts groups loader
     * **/
    protected loadQueue(assets: IBitmapFontGroup[]): Promise<any>;
    /**
     * load next bitmap font from current asset queue
     * @param initialQueue
     */
    protected onLoadProgress(initialQueue: IBitmapFontGroup[]): void;
    /**
     *create lazy bitmap queue. It consists from groups (for example bigWin, collected etc.)
     * **/
    protected loadLazyQueue(assets: IBitmapFontGroup[]): Promise<any>;
    /**
     *load concrete lazy bitmap font group
     * **/
    protected loadLazyGroup(): void;
    protected loadLazyAsset(asset: IBitmapFontGroup): void;
    /**
     * logic for lazy loading
     * check if loader has to force some lazy group
     * or just load next asset
     */
    protected checkNextLazyAsset(): void;
    protected onLazyGroupEnd(): void;
    protected getPath(data: string): string;
    protected onError(error: any): void;
    protected loadProgressHandler(): void;
}
