import { IAssetsToLoad } from "../interface/IAssetsToLoad";
import { EventDispatcher } from "../../EventDispatcher";
import { IDataJSONResponse } from "../interface/IDataJSONResponse";
import { ISpineLoader } from "../interface/ISpineLoader";
export declare class ConfigLoader {
    protected dispatcher: EventDispatcher;
    /**
     * Load config for view parser
     * @param data - url to download
     */
    loadViewConfig(data: string): Promise<any>;
    /**
     * load all params for game setup (depends on concrete game)
     * @param data - url to download
     */
    loadGameParams(data: any): Promise<any>;
    /**
     * load localization text file
     * @param data - url to download
     */
    loadI18N(data: string): Promise<any>;
    /**
     * load config for assets loader (that describes loading priorities)
     * @param data - url to download
     */
    loadAssetsConfig(data: string): Promise<any>;
    /**
     * load config for bitmap fonts loader (that describes loading priorities)
     * @param data  - url to download
     */
    loadBitmapFontsConfig(data: string): Promise<any>;
    /**
     * load config for sounds loader (that describes loading priorities)
     * @param data - url to download
     */
    loadSoundConfig(data: string): Promise<any>;
    /**
     * load config for spine animations
     * @param data - url to download
     */
    loadSpineConfig(data: string): Promise<any>;
    /**
     * parse spine animations
     * @param data
     * - @url to download
     * - @isCommon true as default in spine config. Used for localization if spine animation depends of language folder
     */
    loadSpineData(data: ISpineLoader[], priority: string): Promise<any>;
    /**
     * just loading concrete json file
     * @param data - url to download
     */
    protected loadJson(data: string): Promise<IDataJSONResponse>;
    /**
     * parse data from assets config for assets loader (that describes loading priorities)
     * @param data - json object
     */
    protected parseSpineConfig(data: any): void;
    /**
     * parse data from assets config for assets loader (that describes loading priorities)
     * @param data - json object
     */
    protected parseAssetsConfig(data: any): void;
    /**
     * parse data from bitmap fonts config for bitmap fonts loader (that describes loading priorities)
     * @param data - json object
     */
    protected parseBitmapFontsConfig(data: any): void;
    /**
     * parse data from sound config for sound loader (that describes loading priorities)
     * @param data - json object
     */
    protected parseSoundConfig(data: any): void;
    /**
     * dispatch data from spine config
     * spine config depends on concrete game and its parser has different realization
     * @param data
     * @param id
     */
    protected parseSpineData(data: any, id: string, priority: string): void;
    /**
     * dispatch data from view config
     * view config depends on concrete game and its parser has different realization
     * @param data
     */
    protected parseViewConfig(data: any): void;
    getAssetsByPlatform(groups: IAssetsToLoad): IAssetsToLoad;
    /**
     * used to convert string data to correct Date and Time format
     */
    protected getDateByFormat(data: string, format: string): string;
}
