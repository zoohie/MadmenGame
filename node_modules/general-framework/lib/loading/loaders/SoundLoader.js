import { LoaderConstants } from "../constants/LoaderConstants";
import { LoaderModel } from "../model/LoaderModel";
import { AppLogger } from "../../logger/AppLogger";
import { LoadEvents } from "../events/LoadEvents";
import { EventDispatcher } from "../../EventDispatcher";
export class SoundLoader {
    constructor() {
        this.lazyQueue = [];
        this.dispatcher = EventDispatcher.getInstance();
    }
    load(priority) {
        return new Promise((loadComplete) => {
            switch (priority) {
                case LoaderConstants.GENERAL_PRIORITY:
                    this.currentPriorityID = LoaderConstants.GENERAL_PRIORITY;
                    if (!LoaderModel.generalSoundsToLoad || LoaderModel.generalSoundsToLoad.length <= 0) {
                        loadComplete();
                        return;
                    }
                    return Promise.all([
                        this.loadQueue(LoaderModel.generalSoundsToLoad)
                    ]).then(() => {
                        AppLogger.log("ALL " + LoaderConstants.GENERAL_PRIORITY + " sounds loaded!");
                        loadComplete();
                    });
                    break;
                case LoaderConstants.PRELOAD_PRIORITY:
                    this.currentPriorityID = LoaderConstants.PRELOAD_PRIORITY;
                    if (LoaderModel.preloadSoundsToLoad.length <= 0) {
                        loadComplete();
                        return;
                    }
                    return Promise.all([
                        this.loadQueue(LoaderModel.preloadSoundsToLoad)
                    ]).then(() => {
                        AppLogger.log("ALL " + LoaderConstants.PRELOAD_PRIORITY + " sounds loaded!");
                        loadComplete();
                    });
                    break;
                case LoaderConstants.INITIAL_PRIORITY:
                    this.currentPriorityID = LoaderConstants.INITIAL_PRIORITY;
                    if (LoaderModel.initialSoundsToLoad.length <= 0) {
                        loadComplete();
                        return;
                    }
                    return Promise.all([
                        this.loadQueue(LoaderModel.initialSoundsToLoad)
                    ]).then(() => {
                        AppLogger.log("ALL " + LoaderConstants.INITIAL_PRIORITY + " sounds loaded!");
                        loadComplete();
                    });
                    break;
                case LoaderConstants.LAZY_PRIORITY:
                    this.currentPriorityID = LoaderConstants.LAZY_PRIORITY;
                    if (LoaderModel.lazySoundsToLoad.length <= 0) {
                        loadComplete();
                        return;
                    }
                    return Promise.all([
                        this.loadLazyQueue(LoaderModel.lazySoundsToLoad)
                    ]).then(() => {
                        AppLogger.log("ALL " + LoaderConstants.LAZY_PRIORITY + " sounds loaded!");
                        loadComplete();
                    });
                    break;
            }
        });
    }
    forceLoad(groupId) {
        if (LoaderModel.lazySoundsToLoad.length <= 0) {
            return;
        }
        if (LoaderModel.isGroupLoaded(groupId) || this.currentLazyGroup.id === this.forceGroupId) {
            return;
        }
        this.forceGroupId = groupId;
    }
    loadLazyQueue(soundsData) {
        return new Promise((resolve) => {
            this.mainLazyResolve = resolve;
            const groupsId = [];
            this.lazyQueue = [];
            soundsData.forEach((sound) => {
                sound.group.forEach((groupName) => {
                    if (groupsId.indexOf(groupName) === -1) {
                        groupsId.push(groupName);
                    }
                });
            });
            groupsId.forEach((groupId) => {
                this.lazyQueue.push({
                    id: groupId,
                    assets: soundsData.filter((sound) => {
                        return sound.group.indexOf(groupId) !== -1;
                    })
                });
            });
            this.loadLazyGroup();
        });
    }
    loadLazyGroup() {
        if (this.lazyQueue.length > 0) {
            this.currentLazyGroup = this.lazyQueue.shift();
            LoaderModel.totalLazyGroupSize += this.currentLazyGroup.assets.length;
            this.loadLazySounds(this.currentLazyGroup.assets.pop());
        }
        else {
            this.mainLazyResolve();
        }
    }
    loadLazySounds(group) {
        /**
         * concrete loader depends on sound library
         */
    }
    checkNextLazyAsset() {
        if (this.forceGroupId) {
            let index = this.lazyQueue.findIndex((item) => {
                return item.id === this.forceGroupId;
            });
            if (this.currentLazyGroup.assets.length > 0) {
                this.lazyQueue.unshift(this.currentLazyGroup);
                index++;
            }
            else {
                this.onLazyGroupEnd();
            }
            this.currentLazyGroup = this.lazyQueue.splice(index, 1)[0];
            this.forceGroupId = null;
            this.loadLazySounds(this.currentLazyGroup.assets.pop());
        }
        else {
            if (this.currentLazyGroup.assets.length > 0) {
                this.loadLazySounds(this.currentLazyGroup.assets.pop());
            }
            else {
                this.onLazyGroupEnd();
                this.loadLazyGroup();
            }
        }
    }
    onLazyGroupEnd() {
        AppLogger.log(`assets group is loaded: ${this.currentLazyGroup.id}`);
        this.dispatcher.dispatch(LoadEvents.SOUND_LOADED, this.currentLazyGroup.id);
        LoaderModel.addSoundLoadedGroup(this.currentLazyGroup.id);
        LoaderModel.addLoadedGroup(this.currentLazyGroup.id);
    }
    loadQueue(soundsData) {
        return new Promise((resolve) => {
            this.mainInitialResolve = resolve;
            /**
             * concrete loader depends on sound library
             */
        });
    }
}
//# sourceMappingURL=SoundLoader.js.map