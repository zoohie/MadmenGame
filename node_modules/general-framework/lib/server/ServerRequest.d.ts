interface IServerRequestOptions {
    maxRepeats?: number;
    isNotPopup?: boolean;
}
export declare class ServerRequest {
    private dispatcher;
    private cookieRow;
    private static readonly SERVER_TIMEOUT;
    private static readonly ignoreCode;
    private static MAX_REPEATS;
    static addIgnoreCode(code: any): void;
    private inProgress;
    private timeoutId;
    private counter;
    private url;
    private getParams;
    private fetchParams;
    protected currentRequestType: string;
    private readonly isNotPopup;
    /**
     * Create server reuest instance, incapsulating technical aspects
     * @param type ('init', 'spin', etc. Depends on server API)
     * @param prefix<string>
     * @param options
     */
    constructor(type: string, prefix?: string, options?: IServerRequestOptions);
    /**
     * This is a common method to fetch responses from server.
     * We have 3 possibilities to fetch with timeout 20 sec
     * @param body optional post parameters (Depends on server API)
     * @param params optional getParams to add in request
     * @param method
     */
    fetch(body?: any, params?: any, method?: string): Promise<any>;
    /**
     * Socket
     * */
    socket: any;
    /**
     * Encoding object into url format
     * @param obj object to encode as url params
     */
    private stringifyJSON;
    /**
     * Method performs actual request to server
     * @param resolve external request resolve handler
     * @param reject external request reject handler
     */
    private doNetworkCall;
    /**
     * Handler for successfull request
     * @param response data from server
     * @param resolve external request resolve handler
     * @param reject external request reject handler
     */
    private innerResolve;
    /**
     * Handler for failed request
     * @param error data regarding failure
     * @param resolve external request resolve handler
     * @param reject external request reject handler
     */
    private innerReject;
    /**
     * Finilizing action after request is complete
     */
    private fetchFinally;
    private checkServerErrorMessages;
    private showTimeoutError;
    private onSocketOpened;
}
export {};
