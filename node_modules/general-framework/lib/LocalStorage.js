import { AppLogger } from './logger/AppLogger';
import { AppLoggerMessageType } from './logger/AppLoggerMessageType';
export class LocalStorage {
    /**
     * Empties the list associated with the object of all key/value pairs, if there are any.
     */
    static clear() {
        this.storage && this.storage.clear();
    }
    /**
     * value = storage[key]
     */
    static getItem(key) {
        return this.storage ?
            this.storage.getItem(key) :
            null;
    }
    /**
     * Returns the name of the nth key in the list, or null if n is greater
     * than or equal to the number of key/value pairs in the object.
     */
    static key(index) {
        return this.storage ?
            this.storage.key(index) :
            null;
    }
    /**
     * delete storage[key]
     */
    static removeItem(key) {
        this.storage && this.storage.removeItem(key);
    }
    ;
    /**
     * storage[key] = value
     */
    static setItem(key, value) {
        try {
            this.storage.setItem(key, value);
        }
        catch (domException) {
            if (domException.name === 'QuotaExceededError' ||
                domException.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                AppLogger.log("Browser local storage capacity is full", AppLoggerMessageType.ERROR);
            }
        }
    }
    ;
    /**
     * Gets storage
     */
    static get storage() {
        return this.supportsLocalStorage() ? window.localStorage : null;
    }
    static supportsLocalStorage() {
        try {
            return 'localStorage' in window && window['localStorage'] !== null;
        }
        catch (e) {
            return false;
        }
    }
}
//# sourceMappingURL=LocalStorage.js.map