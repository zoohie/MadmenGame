import { LocalUtil } from "../../localization/LocalUtil";
/**
 * Parse, save and give the data from response on fetch error
 */
export class ErrorServerModel {
    /**
     * Parse data from error
     * @param {object} data
     */
    parseResponse(data) {
        this._status = data.status;
        this._messageHeader = data.message;
        if (data.errors) {
            const body = LocalUtil.text(data.errors[0].code.toString());
            if (body) {
                this._messageHeader = null;
                this._messageBody = body;
            }
            else {
                this._messageBody = data.errors[0].message;
            }
            this._code = data.errors[0].code.toString();
        }
    }
    /**
     * Clear all response values
     */
    clear() {
        this._status = null;
        this._code = null;
        this._messageBody = null;
        this._messageHeader = null;
    }
    /**
     * Getter to return body message
     * @returns {string}
     */
    get messageBody() {
        return this._messageBody;
    }
    /**
     * Getter to return header message
     * @returns {string}
     */
    get messageHeader() {
        return this._messageHeader;
    }
    /**
     * Getter to return code from error
     * @returns {string} - must be the number as the initial type
     */
    get code() {
        return this._code;
    }
    /**
     * Getter to return status from error
     * @returns {string} - must be the number as the initial type
     */
    get status() {
        return this._status;
    }
}
//# sourceMappingURL=ErrorServerModel.js.map