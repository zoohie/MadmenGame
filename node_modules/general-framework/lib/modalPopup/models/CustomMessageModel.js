import { ModalPopupEvents } from "../events/ModalPopupEvents";
import { EventDispatcher } from "../../EventDispatcher";
import { ModalPopupConstants } from "../constants/ModalPopupConstants";
export class CustomMessageModel {
    /**
     * Method returns parsed data of incoming message
     * header - string
     * body - string
     * buttons - array
     */
    getData(data) {
        let buttons = [];
        if (data.buttons) {
            buttons = this.getButtons(data.buttons);
        }
        return {
            header: data.title,
            body: data.text,
            buttons: buttons
        };
    }
    /**
     * Method returns parsed data of buttons list
     * class - string constant, need to detect button style
     * text - string
     * callback - button click event
     */
    getButtons(buttonList) {
        let result = [];
        for (let i = 0; i < buttonList.length; i++) {
            let button = {
                class: this.getClass(buttonList[i].action),
                text: buttonList[i].text,
                callback: this.getCallback(buttonList[i].action, buttonList[i].url)
            };
            result.push(button);
        }
        return result;
    }
    getClass(action) {
        let result = ModalPopupConstants.DANGER_CLASS;
        switch (action) {
            case ModalPopupConstants.CUSTOM_ACTION_HISTORY:
                result = ModalPopupConstants.PRIMARY_CLASS;
                break;
            case ModalPopupConstants.CUSTOM_ACTION_CONTINUE:
                result = ModalPopupConstants.SUCCESS_CLASS;
                break;
        }
        return result;
    }
    getCallback(action, url = "") {
        switch (action) {
            case ModalPopupConstants.CUSTOM_ACTION_CONTINUE:
                return function () {
                    EventDispatcher.getInstance().dispatch(ModalPopupEvents.CUSTOM_EVENT_CONTINUE, url);
                };
            case ModalPopupConstants.CUSTOM_ACTION_EXIT:
                return function () {
                    EventDispatcher.getInstance().dispatch(ModalPopupEvents.CUSTOM_EVENT_EXIT, url);
                };
            case ModalPopupConstants.CUSTOM_ACTION_HISTORY:
                return function () {
                    EventDispatcher.getInstance().dispatch(ModalPopupEvents.CUSTOM_EVENT_HISTORY, url);
                };
            case ModalPopupConstants.CUSTOM_ACTION_CHOICE:
                return function () {
                    EventDispatcher.getInstance().dispatch(ModalPopupEvents.CUSTOM_EVENT_CHOICE, url);
                };
            case ModalPopupConstants.CUSTOM_ACTION_CLOSE:
                return function () {
                    EventDispatcher.getInstance().dispatch(ModalPopupEvents.CUSTOM_EVENT_CLOSE, url);
                };
        }
        return function (e) {
            EventDispatcher.getInstance().dispatch(ModalPopupEvents.HIDE_MODAL_POPUP);
        };
    }
}
//# sourceMappingURL=CustomMessageModel.js.map