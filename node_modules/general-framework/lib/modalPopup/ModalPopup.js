import { ModalPopupEvents } from "./events/ModalPopupEvents";
import { ModalPopupView } from "./ModalPopupView";
import { EventDispatcher } from "../EventDispatcher";
import { getModalPopupStyles } from "./util/getModalPopupStyles";
import { ModalPopupController } from "./controller/ModalPopupController";
/**
 * To use modal first create instance:
 *      -> const modal = new ModalPopup()
 * than inject styles to html head tag:
 *      -> modal.insertPopupStyles([,yourStyles])
 * now you can use it with:
 *      -> dispatcher.dispatch(event [, dataWithTextButtons]);
 */
/**
 * Controller to create and manage of modal popup.
 * @method showModalPopup
 * @method hideModalPopup
 * @method insertPopupStyles
 */
export class ModalPopup {
    constructor() {
        // creating of instances
        this.dispatcher = EventDispatcher.getInstance();
        this.view = new ModalPopupView();
        this._controller = new ModalPopupController();
        // adding listeners to show/hide modal popup
        this.dispatcher.addListener(ModalPopupEvents.SHOW_MODAL_POPUP, this.showModalPopup, this);
        this.dispatcher.addListener(ModalPopupEvents.HIDE_MODAL_POPUP, this.hideModalPopup, this);
        this.view.emit = this.onViewEmit.bind(this);
    }
    /**
     * Calling view method to show modal popup
     * @param data
     */
    showModalPopup(data) {
        this.view.showPopup(data);
    }
    /**
     * Calling view method to hide modal popup
     */
    hideModalPopup() {
        this.view.hidePopup();
    }
    /**
     * Injecting of prepared styles with the possibility of their modification
     * This method create style tag and insert in it prepared styles
     * It's possible to customize default styles for current project
     * @param styles
     */
    insertPopupStyles(styles) {
        const head = document.getElementsByTagName('head')[0];
        const style = document.createElement('style');
        style.type = 'text/css';
        style.appendChild(document.createTextNode(getModalPopupStyles(styles)));
        head.appendChild(style);
    }
    /**
     * register emit method
     * @param event
     */
    onViewEmit(event) {
        this.dispatcher.dispatch(event);
    }
    get controller() {
        return this._controller;
    }
}
//# sourceMappingURL=ModalPopup.js.map