const fs = require("fs");
const path = require("path");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const PATHS = require("./constants");

const isReact = process.env.APP === "react";

module.exports = {
    mode: process.env.NODE_ENV || "development",
    entry: PATHS.src,
    module: {
        rules: [
            // ts
            {
                test: /\.(js|jsx|tsx|ts)$/,
                exclude: /node_modules/,
                use: {
                    loader: isReact ? "babel-loader" : "ts-loader",
                    options: isReact
                        ? {
                            presets: [
                                "@babel/preset-env",
                                "@babel/preset-react",
                                "@babel/preset-typescript"
                            ],
                            plugins: [
                                ["@babel/plugin-proposal-decorators", {legacy: true}],
                                ["@babel/plugin-proposal-class-properties", {loose: true}],
                                "@babel/plugin-transform-runtime",
                                "babel-plugin-styled-components",
                                "@babel/plugin-proposal-object-rest-spread"
                            ]
                        }
                        : undefined
                }
            },
            // styles
            {
                test: /\.(sa|sc|c)ss$/,
                use: [
                    "style-loader",
                    {
                        loader: MiniCssExtractPlugin.loader,
                        options: {
                            // publicPath: "../"
                        }
                    },
                    {
                        loader: "css-loader",
                        options: {
                            url: (origin, absolute) => {
                                // console.log(origin);
                                // console.log(absolute);
                                return false
                            },
                        }
                    },
                    "resolve-url-loader",
                    {
                        loader: "sass-loader",
                        options: {
                            sourceMap: process.env.NODE_ENV === "development"
                        }
                    }
                ]
            },
            {
                test: /\.less$/,
                use: [
                    {
                        loader: 'style-loader',
                    },
                    {
                        loader: 'css-loader',
                    },
                    {
                        loader: 'less-loader',
                        options: {
                            lessOptions: {
                                javascriptEnabled: true,
                                modifyVars: {
                                    hack: `true; @import "${path.resolve(PATHS.src, "theme.less")}";`,
                                },
                            },
                        }
                    },
                ],
            },
            // images
            {
                test: [/\.(bmp|gif|jpe?g|png|tiff?|webp|svg)$/],
                use: [
                    {
                        loader: require.resolve("url-loader"),
                        options: {
                            // publicPath: path.join(PATHS.data, 'images'),
                            limit: 10000,
                            name: "images/[name].[hash:8].[ext]"
                        }
                    },
                ]
            },
            // fonts
            {
                test: /\.(woff2?|eot|ttf|otf|svg)$/,
                loader: "file-loader",
                options: {
                    // url - filename in hash
                    // resPath - absolutely file name
                    // ctx - project root path
                    publicPath: (url, resPath, ctx) => {
                        if (path.extname(url) === ".svg" && !resPath.includes("fonts")) {
                            return;
                        }
                        return path.join("fonts", url);
                    },
                    outputPath: "fonts"
                }
            },
            // audio
            {
                test: /\.(ogg|mp3|wav|mpe?g)$/i,
                loader: "file-loader",
                options: {
                    name: "audio/[path][name].[ext]"
                }
            },
            process.env.NODE_ENV === "development" && {
                enforce: "pre",
                test: [/\.jsx?$/, /\.tsx?$/],
                loader: "source-map-loader"
            }
        ].filter(Boolean)
    },
    resolve: {
        extensions: [".tsx", ".ts", ".js", ".jsx", ".css"],
        alias: {
            "~": PATHS.src,
            "Images": path.join(PATHS.data, "images")
        }
    },
    externals: {
        pixi: "PIXI",
        favicon: fs.existsSync(PATHS.favicon) && PATHS.favicon
    }
};

