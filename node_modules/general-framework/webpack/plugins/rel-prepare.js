const fs = require('fs');
const path = require('path');
const uglify = require('uglify-js');

module.exports = class LinkRelMakerPlugin {
    constructor({root, output, buildTimestamp}) {
        this.root = root;
        this.output = output;
        this.buildTimestamp = buildTimestamp;
    }

    apply(compiler) {
        // TODO: resolve async conflict with compress plugin. Must occur before compress plugin remove original files
        compiler.hooks.done.tap(
            'LinkPreparePlugin',
            (compilation) => {
                const htmlPath = path.join(this.output, 'index.html');
                const jsPath = path.join(__dirname, 'html-link-maker.js');

                const assetsPath = path.join(this.root, 'data', 'settings', 'assets_config.json');
                const soundsPath = path.join(this.root, 'data', 'settings', 'sound_config.json');

                // creating assets list
                let assets = [];
                if (fs.existsSync(assetsPath)) {
                    const {preload, initial} = require(assetsPath).groups;

                    assets = [...preload, ...initial].reduce(
                        (acc, item) => {
                            const base = {
                                url: item.jsonUrl.split('/')[0],
                                platform: item.platform,
                                isCommon: item.isCommon
                            };
                            const atlasExtension = item.atlasExtension || 'png';
                            return [
                                ...acc,
                                {...base, as: 'fetch', postfix: 'json'},
                                {...base, as: 'image', postfix: atlasExtension},
                            ]
                        }, []);
                }

                // creating sounds list
                let sounds = [];
                if (fs.existsSync(soundsPath)) {
                    const {preload, initial} = require(soundsPath).groups;

                    sounds = [...preload, ...initial].map(({url}) => ({url, as: 'audio'}));
                }

                fs.readFile(htmlPath, {encoding: 'utf-8'}, (err, html) => {
                    if (err) throw err;

                    let code = 'var buildTimeStamp=' + this.buildTimestamp;

                    if (assets.length || sounds.length) {
                        try {
                            const js = fs.readFileSync(jsPath, {encoding: 'utf-8'});

                            code = uglify.minify(
                                js
                                    .replace('/*--webpackBuildTimeStamp--*/', '=' + this.buildTimestamp)
                                    .replace('/*--webpackInsertedVariable--*/', '=' + JSON.stringify([...assets, ...sounds])),
                                {compress: {negate_iife: false}}
                            ).code;
                        } catch (err) {
                            throw err;
                        }
                    }

                    const newJs = '<script>' + code + '</script>';
                    const newHtml = html.indexOf('<script') > -1
                        ? html.replace('<script', newJs + '<script')
                        : html.replace('</body>', newJs + '</body>');

                    fs.writeFile(htmlPath, newHtml, (err) => {
                        if (err) throw err;
                    })
                })
            }
        );
    }
};
